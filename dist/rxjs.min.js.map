{"version":3,"sources":["rxjs/observable/BoundCallbackObservable.js","rxjs/observable/bindCallback.js","rxjs/add/observable/bindCallback.js","rxjs/observable/BoundNodeCallbackObservable.js","rxjs/observable/bindNodeCallback.js","rxjs/add/observable/bindNodeCallback.js","rxjs/observable/combineLatest.js","rxjs/add/observable/combineLatest.js","rxjs/add/observable/concat.js","rxjs/observable/DeferObservable.js","rxjs/observable/defer.js","rxjs/add/observable/defer.js","rxjs/observable/empty.js","rxjs/add/observable/empty.js","rxjs/observable/ForkJoinObservable.js","rxjs/observable/forkJoin.js","rxjs/add/observable/forkJoin.js","rxjs/add/observable/from.js","rxjs/observable/FromEventObservable.js","rxjs/observable/fromEvent.js","rxjs/add/observable/fromEvent.js","rxjs/observable/FromEventPatternObservable.js","rxjs/observable/fromEventPattern.js","rxjs/add/observable/fromEventPattern.js","rxjs/observable/fromPromise.js","rxjs/add/observable/fromPromise.js","rxjs/observable/GenerateObservable.js","rxjs/observable/generate.js","rxjs/add/observable/generate.js","rxjs/observable/IfObservable.js","rxjs/observable/if.js","rxjs/add/observable/if.js","rxjs/observable/IntervalObservable.js","rxjs/observable/interval.js","rxjs/add/observable/interval.js","rxjs/add/observable/merge.js","rxjs/add/observable/race.js","rxjs/observable/NeverObservable.js","rxjs/observable/never.js","rxjs/add/observable/never.js","rxjs/add/observable/of.js","rxjs/observable/onErrorResumeNext.js","rxjs/add/observable/onErrorResumeNext.js","rxjs/observable/PairsObservable.js","rxjs/observable/pairs.js","rxjs/add/observable/pairs.js","rxjs/observable/RangeObservable.js","rxjs/observable/range.js","rxjs/add/observable/range.js","rxjs/observable/UsingObservable.js","rxjs/observable/using.js","rxjs/add/observable/using.js","rxjs/observable/ErrorObservable.js","rxjs/observable/throw.js","rxjs/add/observable/throw.js","rxjs/add/observable/timer.js","rxjs/observable/zip.js","rxjs/add/observable/zip.js","rxjs/observable/dom/ajax.js","rxjs/add/observable/dom/ajax.js","rxjs/util/assign.js","rxjs/observable/dom/WebSocketSubject.js","rxjs/observable/dom/webSocket.js","rxjs/add/observable/dom/webSocket.js","rxjs/operator/buffer.js","rxjs/add/operator/buffer.js","rxjs/operator/bufferCount.js","rxjs/add/operator/bufferCount.js","rxjs/operator/bufferTime.js","rxjs/add/operator/bufferTime.js","rxjs/operator/bufferToggle.js","rxjs/add/operator/bufferToggle.js","rxjs/operator/bufferWhen.js","rxjs/add/operator/bufferWhen.js","rxjs/operator/catch.js","rxjs/add/operator/catch.js","rxjs/operator/combineAll.js","rxjs/add/operator/combineAll.js","rxjs/operator/combineLatest.js","rxjs/add/operator/combineLatest.js","rxjs/operator/concat.js","rxjs/add/operator/concat.js","rxjs/operator/concatAll.js","rxjs/add/operator/concatAll.js","rxjs/operator/concatMap.js","rxjs/add/operator/concatMap.js","rxjs/operator/concatMapTo.js","rxjs/add/operator/concatMapTo.js","rxjs/operator/count.js","rxjs/add/operator/count.js","rxjs/operator/dematerialize.js","rxjs/add/operator/dematerialize.js","rxjs/operator/debounce.js","rxjs/add/operator/debounce.js","rxjs/operator/debounceTime.js","rxjs/add/operator/debounceTime.js","rxjs/operator/defaultIfEmpty.js","rxjs/add/operator/defaultIfEmpty.js","rxjs/operator/delay.js","rxjs/add/operator/delay.js","rxjs/operator/delayWhen.js","rxjs/add/operator/delayWhen.js","rxjs/operator/distinct.js","rxjs/add/operator/distinct.js","rxjs/operator/distinctUntilChanged.js","rxjs/add/operator/distinctUntilChanged.js","rxjs/operator/distinctUntilKeyChanged.js","rxjs/add/operator/distinctUntilKeyChanged.js","rxjs/operator/do.js","rxjs/add/operator/do.js","rxjs/operator/exhaust.js","rxjs/add/operator/exhaust.js","rxjs/operator/exhaustMap.js","rxjs/add/operator/exhaustMap.js","rxjs/operator/expand.js","rxjs/add/operator/expand.js","rxjs/operator/elementAt.js","rxjs/add/operator/elementAt.js","rxjs/operator/filter.js","rxjs/add/operator/filter.js","rxjs/operator/finally.js","rxjs/add/operator/finally.js","rxjs/operator/find.js","rxjs/add/operator/find.js","rxjs/operator/findIndex.js","rxjs/add/operator/findIndex.js","rxjs/operator/first.js","rxjs/add/operator/first.js","rxjs/operator/groupBy.js","rxjs/add/operator/groupBy.js","rxjs/operator/ignoreElements.js","rxjs/add/operator/ignoreElements.js","rxjs/operator/isEmpty.js","rxjs/add/operator/isEmpty.js","rxjs/operator/audit.js","rxjs/add/operator/audit.js","rxjs/operator/auditTime.js","rxjs/add/operator/auditTime.js","rxjs/operator/last.js","rxjs/add/operator/last.js","rxjs/operator/let.js","rxjs/add/operator/let.js","rxjs/operator/every.js","rxjs/add/operator/every.js","rxjs/operator/map.js","rxjs/add/operator/map.js","rxjs/operator/mapTo.js","rxjs/add/operator/mapTo.js","rxjs/operator/materialize.js","rxjs/add/operator/materialize.js","rxjs/operator/max.js","rxjs/add/operator/max.js","rxjs/operator/merge.js","rxjs/add/operator/merge.js","rxjs/operator/mergeAll.js","rxjs/add/operator/mergeAll.js","rxjs/operator/mergeMap.js","rxjs/add/operator/mergeMap.js","rxjs/operator/mergeMapTo.js","rxjs/add/operator/mergeMapTo.js","rxjs/operator/mergeScan.js","rxjs/add/operator/mergeScan.js","rxjs/operator/min.js","rxjs/add/operator/min.js","rxjs/operator/multicast.js","rxjs/add/operator/multicast.js","rxjs/operator/observeOn.js","rxjs/add/operator/observeOn.js","rxjs/operator/onErrorResumeNext.js","rxjs/add/operator/onErrorResumeNext.js","rxjs/operator/pairwise.js","rxjs/add/operator/pairwise.js","rxjs/operator/partition.js","rxjs/add/operator/partition.js","rxjs/operator/pluck.js","rxjs/add/operator/pluck.js","rxjs/operator/publish.js","rxjs/add/operator/publish.js","rxjs/operator/publishBehavior.js","rxjs/add/operator/publishBehavior.js","rxjs/operator/publishReplay.js","rxjs/add/operator/publishReplay.js","rxjs/operator/publishLast.js","rxjs/add/operator/publishLast.js","rxjs/operator/race.js","rxjs/add/operator/race.js","rxjs/operator/reduce.js","rxjs/add/operator/reduce.js","rxjs/operator/repeat.js","rxjs/add/operator/repeat.js","rxjs/operator/repeatWhen.js","rxjs/add/operator/repeatWhen.js","rxjs/operator/retry.js","rxjs/add/operator/retry.js","rxjs/operator/retryWhen.js","rxjs/add/operator/retryWhen.js","rxjs/operator/sample.js","rxjs/add/operator/sample.js","rxjs/operator/sampleTime.js","rxjs/add/operator/sampleTime.js","rxjs/operator/scan.js","rxjs/add/operator/scan.js","rxjs/operator/sequenceEqual.js","rxjs/add/operator/sequenceEqual.js","rxjs/operator/share.js","rxjs/add/operator/share.js","rxjs/operator/shareReplay.js","rxjs/add/operator/shareReplay.js","rxjs/operator/single.js","rxjs/add/operator/single.js","rxjs/operator/skip.js","rxjs/add/operator/skip.js","rxjs/operator/skipLast.js","rxjs/add/operator/skipLast.js","rxjs/operator/skipUntil.js","rxjs/add/operator/skipUntil.js","rxjs/operator/skipWhile.js","rxjs/add/operator/skipWhile.js","rxjs/operator/startWith.js","rxjs/add/operator/startWith.js","rxjs/observable/SubscribeOnObservable.js","rxjs/operators/subscribeOn.js","rxjs/operator/subscribeOn.js","rxjs/add/operator/subscribeOn.js","rxjs/operator/switch.js","rxjs/add/operator/switch.js","rxjs/operator/switchMap.js","rxjs/add/operator/switchMap.js","rxjs/operator/switchMapTo.js","rxjs/add/operator/switchMapTo.js","rxjs/operator/take.js","rxjs/add/operator/take.js","rxjs/operator/takeLast.js","rxjs/add/operator/takeLast.js","rxjs/operator/takeUntil.js","rxjs/add/operator/takeUntil.js","rxjs/operator/takeWhile.js","rxjs/add/operator/takeWhile.js","rxjs/operator/throttle.js","rxjs/add/operator/throttle.js","rxjs/operator/throttleTime.js","rxjs/add/operator/throttleTime.js","rxjs/add/operator/timeInterval.js","rxjs/operator/timeout.js","rxjs/add/operator/timeout.js","rxjs/operator/timeoutWith.js","rxjs/add/operator/timeoutWith.js","rxjs/operator/timestamp.js","rxjs/add/operator/timestamp.js","rxjs/operator/toArray.js","rxjs/add/operator/toArray.js","rxjs/operator/window.js","rxjs/add/operator/window.js","rxjs/operator/windowCount.js","rxjs/add/operator/windowCount.js","rxjs/operator/windowTime.js","rxjs/add/operator/windowTime.js","rxjs/operator/windowToggle.js","rxjs/add/operator/windowToggle.js","rxjs/operator/windowWhen.js","rxjs/add/operator/windowWhen.js","rxjs/operator/withLatestFrom.js","rxjs/add/operator/withLatestFrom.js","rxjs/operator/zip.js","rxjs/add/operator/zip.js","rxjs/operator/zipAll.js","rxjs/add/operator/zipAll.js","rxjs/operator/timeInterval.js","rxjs/testing/ColdObservable.js","rxjs/testing/SubscriptionLoggable.js","rxjs/util/applyMixins.js","rxjs/testing/HotObservable.js","rxjs/testing/SubscriptionLog.js","rxjs/testing/TestScheduler.js","rxjs/scheduler/VirtualTimeScheduler.js","rxjs/observable/dom/AjaxObservable.js","rxjs/util/Immediate.js","rxjs/scheduler/AsapAction.js","rxjs/scheduler/AsapScheduler.js","rxjs/scheduler/asap.js","rxjs/util/AnimationFrame.js","rxjs/scheduler/AnimationFrameAction.js","rxjs/scheduler/AnimationFrameScheduler.js","rxjs/scheduler/animationFrame.js","rxjs/operators/audit.js","rxjs/observable/TimerObservable.js","rxjs/observable/timer.js","rxjs/operators/auditTime.js","rxjs/operators/buffer.js","rxjs/operators/bufferCount.js","rxjs/operators/bufferTime.js","rxjs/operators/bufferToggle.js","rxjs/operators/bufferWhen.js","rxjs/operators/catchError.js","rxjs/operators/combineAll.js","rxjs/operators/combineLatest.js","rxjs/operators/concat.js","rxjs/operators/concatMap.js","rxjs/operators/concatMapTo.js","rxjs/operators/count.js","rxjs/operators/debounce.js","rxjs/operators/debounceTime.js","rxjs/operators/delay.js","rxjs/operators/delayWhen.js","rxjs/operators/dematerialize.js","rxjs/util/Set.js","rxjs/operators/distinct.js","rxjs/operators/distinctUntilChanged.js","rxjs/operators/distinctUntilKeyChanged.js","rxjs/operators/elementAt.js","rxjs/operators/every.js","rxjs/operators/exhaust.js","rxjs/operators/exhaustMap.js","rxjs/operators/expand.js","rxjs/operators/finalize.js","rxjs/operators/find.js","rxjs/operators/findIndex.js","rxjs/operators/first.js","rxjs/util/MapPolyfill.js","rxjs/util/Map.js","rxjs/util/FastMap.js","rxjs/operators/groupBy.js","rxjs/operators/ignoreElements.js","rxjs/operators/isEmpty.js","rxjs/operators/last.js","rxjs/operators/mapTo.js","rxjs/operators/materialize.js","rxjs/operators/max.js","rxjs/observable/merge.js","rxjs/operators/merge.js","rxjs/operators/mergeMapTo.js","rxjs/operators/mergeScan.js","rxjs/operators/min.js","rxjs/operators/onErrorResumeNext.js","rxjs/operators/pairwise.js","rxjs/util/not.js","rxjs/operators/filter.js","rxjs/operators/partition.js","rxjs/operators/pluck.js","rxjs/operators/publish.js","rxjs/BehaviorSubject.js","rxjs/operators/publishBehavior.js","rxjs/AsyncSubject.js","rxjs/operators/publishLast.js","rxjs/operators/publishReplay.js","rxjs/observable/race.js","rxjs/operators/race.js","rxjs/operators/repeat.js","rxjs/operators/repeatWhen.js","rxjs/operators/retry.js","rxjs/operators/retryWhen.js","rxjs/operators/sample.js","rxjs/operators/sampleTime.js","rxjs/operators/sequenceEqual.js","rxjs/observable/ConnectableObservable.js","rxjs/operators/multicast.js","rxjs/operators/refCount.js","rxjs/operators/share.js","rxjs/scheduler/QueueAction.js","rxjs/scheduler/QueueScheduler.js","rxjs/scheduler/queue.js","rxjs/ReplaySubject.js","rxjs/operators/shareReplay.js","rxjs/util/EmptyError.js","rxjs/operators/single.js","rxjs/operators/skip.js","rxjs/operators/skipLast.js","rxjs/operators/skipUntil.js","rxjs/operators/skipWhile.js","rxjs/observable/of.js","rxjs/observable/PromiseObservable.js","rxjs/observable/IteratorObservable.js","rxjs/observable/ArrayLikeObservable.js","rxjs/Notification.js","rxjs/operators/observeOn.js","rxjs/observable/FromObservable.js","rxjs/observable/from.js","rxjs/operators/mergeMap.js","rxjs/operators/mergeAll.js","rxjs/operators/concatAll.js","rxjs/observable/concat.js","rxjs/operators/startWith.js","rxjs/util/identity.js","rxjs/operators/switchAll.js","rxjs/operators/switchMap.js","rxjs/operators/switchMapTo.js","rxjs/operators/take.js","rxjs/operators/takeUntil.js","rxjs/operators/takeWhile.js","rxjs/operators/tap.js","rxjs/operators/throttle.js","rxjs/operators/throttleTime.js","rxjs/operators/timeInterval.js","rxjs/util/TimeoutError.js","rxjs/operators/timeout.js","rxjs/util/isDate.js","rxjs/operators/timeoutWith.js","rxjs/operators/map.js","rxjs/operators/timestamp.js","rxjs/operators/scan.js","rxjs/util/ArgumentOutOfRangeError.js","rxjs/operators/takeLast.js","rxjs/operators/defaultIfEmpty.js","rxjs/operators/reduce.js","rxjs/operators/toArray.js","rxjs/operators/window.js","rxjs/operators/windowCount.js","rxjs/scheduler/Action.js","rxjs/scheduler/AsyncAction.js","rxjs/Scheduler.js","rxjs/scheduler/AsyncScheduler.js","rxjs/scheduler/async.js","rxjs/util/isNumeric.js","rxjs/operators/windowTime.js","rxjs/operators/windowToggle.js","rxjs/util/ObjectUnsubscribedError.js","rxjs/SubjectSubscription.js","rxjs/Subject.js","rxjs/operators/windowWhen.js","rxjs/operators/withLatestFrom.js","rxjs/observable/ScalarObservable.js","rxjs/observable/EmptyObservable.js","rxjs/util/isScheduler.js","rxjs/observable/ArrayObservable.js","rxjs/OuterSubscriber.js","rxjs/util/isArrayLike.js","rxjs/util/isPromise.js","rxjs/util/toSubscriber.js","rxjs/util/noop.js","rxjs/util/pipe.js","rxjs/Observable.js","rxjs/util/isArray.js","rxjs/util/isObject.js","rxjs/util/isFunction.js","rxjs/util/tryCatch.js","rxjs/util/errorObject.js","rxjs/util/UnsubscriptionError.js","rxjs/Subscription.js","rxjs/Observer.js","rxjs/symbol/rxSubscriber.js","rxjs/Subscriber.js","rxjs/InnerSubscriber.js","rxjs/symbol/observable.js","rxjs/util/subscribeToResult.js","rxjs/util/root.js","rxjs/symbol/iterator.js","rxjs/operators/zip.js","rxjs/operators/zipAll.js","rxjs/operators.js","rxjs/Rx.js"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Object","defineProperty","exports","tslib_1","require","Observable_1","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","_this","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","concat","subscribe","state","self","result_2","add","Observable","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","result","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","from_1","from","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","generate_1","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","race_1","race","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of_1","of","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","syncErrorThrowable","ErrorObservable_1","_throw","throw_1","throw","timer_1","timer","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","binaryType","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","buffer_1","bufferCount","bufferSize","startBufferEvery","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","Number","POSITIVE_INFINITY","bufferTime_1","bufferToggle","openings","closingSelector","bufferToggle_1","bufferWhen","bufferWhen_1","_catch","catchError_1","catchError","catch_1","catch","combineAll","combineAll_1","concat_2","concatStatic","concatAll","concatAll_1","concatMap","concatMap_1","concatMapTo","innerObservable","concatMapTo_1","predicate","count_1","dematerialize","dematerialize_1","debounce","durationSelector","debounce_1","debounceTime","dueTime","debounceTime_1","defaultIfEmpty","defaultValue","defaultIfEmpty_1","delay","delay_1","delayWhen","delayDurationSelector","subscriptionDelay","delayWhen_1","distinct","keySelector","flushes","distinct_1","distinctUntilChanged","compare","distinctUntilChanged_1","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","tap_1","tap","do_1","do","exhaust","exhaust_1","exhaustMap","exhaustMap_1","expand","concurrent","expand_1","elementAt","elementAt_1","filter","thisArg","filter_1","_finally","callback","finalize_1","finalize","finally_1","finally","find","find_1","findIndex","findIndex_1","first","first_1","groupBy","elementSelector","subjectSelector","groupBy_1","GroupedObservable","ignoreElements","ignoreElements_1","isEmpty","isEmpty_1","audit","audit_1","auditTime","duration","auditTime_1","last","last_1","letProto","let_1","let","letBind","every","every_1","map","map_1","mapTo","mapTo_1","materialize","materialize_1","max","comparer","max_1","merge_2","mergeStatic","mergeAll","mergeAll_1","mergeMap","mergeMap_1","flatMap","mergeMapTo","mergeMapTo_1","flatMapTo","mergeScan","accumulator","seed","mergeScan_1","min","min_1","multicast","subjectOrSubjectFactory","multicast_1","observeOn","observeOn_1","nextSources","pairwise","pairwise_1","partition","partition_1","pluck","properties","pluck_1","publish","publish_1","publishBehavior","publishBehavior_1","publishReplay","windowTime","selectorOrScheduler","publishReplay_1","publishLast","publishLast_1","race_2","raceStatic","reduce","reduce_1","repeat","repeat_1","repeatWhen","notifier","repeatWhen_1","retry","retry_1","retryWhen","retryWhen_1","sample","sample_1","sampleTime","sampleTime_1","scan","scan_1","sequenceEqual","compareTo","comparor","sequenceEqual_1","share","share_1","shareReplay","shareReplay_1","single","single_1","skip","skip_1","skipLast","skipLast_1","skipUntil","skipUntil_1","skipWhile","skipWhile_1","startWith","array","startWith_1","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","switchAll_1","switchAll","switch_1","switch","switchMap","switchMap_1","switchMapTo","switchMapTo_1","take","take_1","takeLast","takeLast_1","takeUntil","takeUntil_1","takeWhile","takeWhile_1","throttle","config","throttle_1","defaultThrottleConfig","throttleTime","throttleTime_1","timeInterval_1","timeInterval","timeout","due","timeout_1","timeoutWith","withObservable","timeoutWith_1","timestamp","timestamp_1","toArray","toArray_1","window","windowBoundaries","window_1","windowCount","windowSize","startWindowEvery","windowCount_1","windowTimeSpan","windowCreationInterval","maxWindowSize","windowTime_1","windowToggle","windowToggle_1","windowWhen","windowWhen_1","withLatestFrom","withLatestFrom_1","zipProto","zipAll","zipAll_1","TimeInterval","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","observable","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","subscriptions","messagesLength","message","notification","observe","frame","applyMixins","SubscriptionLoggable","SubscriptionLog_1","push","SubscriptionLog","now","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","Notification_1","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","indexOf","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","Notification","createNext","createError","createComplete","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","c","materializeInnerObservables","testMessages","subIndex","frameOffset","getValue","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","action","actions","execute","AsyncScheduler","work","active","id","requestAsyncId","sort","sortActions","recycleAsyncId","_execute","a","b","AsyncAction","getCORSRequest","XMLHttpRequest","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","mapResponse","responseType","parseXhrResponse","xhr","response","responseText","responseXML","urlOrRequest","request","createXHR","crossDomain","withCredentials","prop","AjaxSubscriber","get","post","delete","put","patch","getJSON","done","FormData","serializeBody","AjaxResponse","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","ImmediateDefinition","setImmediate","bind","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","o","process","Boolean","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","fn","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","Math","random","onGlobalMessage","globalMessageHandler","event","slice","setTimeout","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","cb","AnimationFrame","AnimationFrame_1","AnimationFrameAction","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","AuditOperator","AuditSubscriber","hasValue","_next","throttled","clearThrottle","remove","isDate_1","TimerObservable","isDate","initialDelay","TimerObservable_1","BufferOperator","BufferSubscriber","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","splice","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","CatchOperator","caught","CatchSubscriber","isStopped","err2","_unsubscribeAndRecycle","none","CombineLatestSubscriber","toRespond","unused","oldVal","_tryProject","CountOperator","CountSubscriber","_tryPredicate","DebounceOperator","DebounceSubscriber","durationSubscription","_tryNext","emitValue","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","absoluteDelay","delayFor","abs","DelayOperator","DelaySubscriber","errored","time","_schedule","scheduleNotification","DelayMessage","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","DeMaterializeOperator","DeMaterializeSubscriber","minimalSetImpl","MinimalSet","_values","has","enumerable","configurable","clear","Set","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","EveryOperator","EverySubscriber","everyValueMatch","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandOperator","ExpandSubscriber","subscribeToProjection","FinallyOperator","FinallySubscriber","FindValueOperator","yieldIndex","FindValueSubscriber","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","MapPolyfill","size","_keys","set","forEach","MapPolyfill_1","Map","FastMap","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsOperator","IgnoreElementsSubscriber","IsEmptyOperator","IsEmptySubscriber","LastOperator","LastSubscriber","MapToOperator","MapToSubscriber","MaterializeOperator","MaterializeSubscriber","MergeMapToOperator","ish","MergeMapToSubscriber","_innerSub","MergeScanOperator","MergeScanSubscriber","acc","OnErrorResumeNextOperator","FromObservable_1","FromObservable","OnErrorResumeNextSubscriber","subscribeToNextSource","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","not","pred","notPred","FilterOperator","FilterSubscriber","not_1","plucker","props","currentProp","p","ObjectUnsubscribedError_1","BehaviorSubject","_value","hasError","thrownError","ObjectUnsubscribedError","BehaviorSubject_1","hasNext","EMPTY","RaceOperator","RaceSubscriber","hasFirst","RepeatOperator","RepeatSubscriber","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetryOperator","RetrySubscriber","RetryWhenOperator","RetryWhenSubscriber","errors","SampleOperator","sampleSubscriber","SampleSubscriber","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","SequenceEqualOperator","SequenceEqualSubscriber","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","areEqual","nextB","refCount_1","ConnectableObservable","subjectFactory","_refCount","_isComplete","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","refCount","connectableProto","connectableObservableDescriptor","writable","connectable","SubjectSubscriber","RefCountSubscriber","RefCountOperator","refCounter","sharedConnection","MulticastOperator","ConnectableObservable_1","shareSubjectFactory","QueueAction","QueueScheduler","QueueAction_1","QueueScheduler_1","queue_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","SubjectSubscription","ObserveOnSubscriber","eventsCount","spliceCount","shareReplayOperator","isComplete","name","stack","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipOperator","SkipSubscriber","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","ring","oldValue","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","promise","_isScalar","then","getIterator","iterator_1","iterator","StringIterator","ArrayIterator","toLength","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","kind","accept","toObservable","undefinedValueNotification","completeNotification","ObserveOnOperator","scheduleMessage","ObserveOnMessage","isArrayLike_1","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isPromise","isArrayLike","MergeMapOperator","MergeMapSubscriber","_notifyResultSelector","identity_1","identity","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","TakeOperator","TakeSubscriber","TakeUntilOperator","TakeUntilSubscriber","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrown","syncErrorValue","ThrottleOperator","leading","trailing","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeOperator","ThrottleTimeSubscriber","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","TimeoutError","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","Date","TimeoutWithOperator","TimeoutWithSubscriber","MapOperator","MapSubscriber","Timestamp","hasSeed","ScanOperator","ScanSubscriber","_seed","TakeLastOperator","TakeLastSubscriber","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","pipe_1","pipe","toArrayReducer","item","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","WindowCountOperator","WindowCountSubscriber","windows","Action","Action_1","pending","setInterval","clearInterval","Scheduler","Scheduler_1","val","parseFloat","WindowTimeOperator","dispatchWindowTimeSpanOnly","closeWindow","dispatchWindowCreation","timeSpanState","dispatchWindowClose","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","numberOfNextedValues","window_2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","subscriberIndex","rxSubscriber_1","rxSubscriber","copy","_trySubscribe","asObservable","unsubscribeClosingNotification","closingNotification","WithLatestFromOperator","WithLatestFromSubscriber","found","toSubscriber","Observer_1","fns","pipeFromArray","input","toSubscriber_1","observerOrNext","sink","PromiseCtor","Rx","Promise","resolve","reject","operations","toPromise","isObject","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","isObject_1","_parent","_parents","_subscriptions","hasErrors","trial","sub","teardown","_addParent","tmp","subscriptionIndex","Symbol","for","$$rxSubscriber","destinationOrNext","SafeSubscriber","_parentSubscriber","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","InnerSubscriber","getSymbolObservable","$$observable","outerSubscriber","InnerSubscriber_1","obs","msg","__window","__self","WorkerGlobalScope","__global","global","_root","symbolIteratorPonyfill","$$iterator","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","mergeMap_2","TestScheduler_1","animationFrame_1","_operators","operators"],"mappings":"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","file":"rxjs.min.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar AsyncSubject_1 = require(\"../AsyncSubject\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.callbackFunc = callbackFunc;\n        _this.selector = selector;\n        _this.args = args;\n        _this.context = context;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BoundCallbackObservable_1 = require(\"./BoundCallbackObservable\");\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar bindCallback_1 = require(\"../../observable/bindCallback\");\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar AsyncSubject_1 = require(\"../AsyncSubject\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.callbackFunc = callbackFunc;\n        _this.selector = selector;\n        _this.args = args;\n        _this.context = context;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BoundNodeCallbackObservable_1 = require(\"./BoundNodeCallbackObservable\");\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar bindNodeCallback_1 = require(\"../../observable/bindNodeCallback\");\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar isArray_1 = require(\"../util/isArray\");\nvar ArrayObservable_1 = require(\"./ArrayObservable\");\nvar combineLatest_1 = require(\"../operators/combineLatest\");\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar combineLatest_1 = require(\"../../observable/combineLatest\");\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar concat_1 = require(\"../../observable/concat\");\nObservable_1.Observable.concat = concat_1.concat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        var _this = _super.call(this) || this;\n        _this.observableFactory = observableFactory;\n        return _this;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        var _this = _super.call(this, destination) || this;\n        _this.factory = factory;\n        _this.tryDefer();\n        return _this;\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeferObservable_1 = require(\"./DeferObservable\");\nexports.defer = DeferObservable_1.DeferObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar defer_1 = require(\"../../observable/defer\");\nObservable_1.Observable.defer = defer_1.defer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EmptyObservable_1 = require(\"./EmptyObservable\");\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar empty_1 = require(\"../../observable/empty\");\nObservable_1.Observable.empty = empty_1.empty;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar EmptyObservable_1 = require(\"./EmptyObservable\");\nvar isArray_1 = require(\"../util/isArray\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        var _this = _super.call(this) || this;\n        _this.sources = sources;\n        _this.resultSelector = resultSelector;\n        return _this;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.sources = sources;\n        _this.resultSelector = resultSelector;\n        _this.completed = 0;\n        _this.haveValues = 0;\n        var len = sources.length;\n        _this.total = len;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(_this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                _this.add(innerSubscription);\n            }\n        }\n        return _this;\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ForkJoinObservable_1 = require(\"./ForkJoinObservable\");\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar forkJoin_1 = require(\"../../observable/forkJoin\");\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar from_1 = require(\"../../observable/from\");\nObservable_1.Observable.from = from_1.from;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar isFunction_1 = require(\"../util/isFunction\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar Subscription_1 = require(\"../Subscription\");\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        var _this = _super.call(this) || this;\n        _this.sourceObj = sourceObj;\n        _this.eventName = eventName;\n        _this.selector = selector;\n        _this.options = options;\n        return _this;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FromEventObservable_1 = require(\"./FromEventObservable\");\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar fromEvent_1 = require(\"../../observable/fromEvent\");\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar isFunction_1 = require(\"../util/isFunction\");\nvar Observable_1 = require(\"../Observable\");\nvar Subscription_1 = require(\"../Subscription\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        var _this = _super.call(this) || this;\n        _this.addHandler = addHandler;\n        _this.removeHandler = removeHandler;\n        _this.selector = selector;\n        return _this;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FromEventPatternObservable_1 = require(\"./FromEventPatternObservable\");\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar fromEventPattern_1 = require(\"../../observable/fromEventPattern\");\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PromiseObservable_1 = require(\"./PromiseObservable\");\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar fromPromise_1 = require(\"../../observable/fromPromise\");\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.initialState = initialState;\n        _this.condition = condition;\n        _this.iterate = iterate;\n        _this.resultSelector = resultSelector;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state\n            });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GenerateObservable_1 = require(\"./GenerateObservable\");\nexports.generate = GenerateObservable_1.GenerateObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar generate_1 = require(\"../../observable/generate\");\nObservable_1.Observable.generate = generate_1.generate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        var _this = _super.call(this) || this;\n        _this.condition = condition;\n        _this.thenSource = thenSource;\n        _this.elseSource = elseSource;\n        return _this;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        var _this = _super.call(this, destination) || this;\n        _this.condition = condition;\n        _this.thenSource = thenSource;\n        _this.elseSource = elseSource;\n        _this.tryIf();\n        return _this;\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IfObservable_1 = require(\"./IfObservable\");\nexports._if = IfObservable_1.IfObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar if_1 = require(\"../../observable/if\");\nObservable_1.Observable.if = if_1._if;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar isNumeric_1 = require(\"../util/isNumeric\");\nvar Observable_1 = require(\"../Observable\");\nvar async_1 = require(\"../scheduler/async\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        var _this = _super.call(this) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            _this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            _this.scheduler = async_1.async;\n        }\n        return _this;\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IntervalObservable_1 = require(\"./IntervalObservable\");\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar interval_1 = require(\"../../observable/interval\");\nObservable_1.Observable.interval = interval_1.interval;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar merge_1 = require(\"../../observable/merge\");\nObservable_1.Observable.merge = merge_1.merge;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar race_1 = require(\"../../observable/race\");\nObservable_1.Observable.race = race_1.race;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar noop_1 = require(\"../util/noop\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(NeverObservable, _super);\n    function NeverObservable() {\n        return _super.call(this) || this;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar NeverObservable_1 = require(\"./NeverObservable\");\nexports.never = NeverObservable_1.NeverObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar never_1 = require(\"../../observable/never\");\nObservable_1.Observable.never = never_1.never;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar of_1 = require(\"../../observable/of\");\nObservable_1.Observable.of = of_1.of;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar onErrorResumeNext_1 = require(\"../operators/onErrorResumeNext\");\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar onErrorResumeNext_1 = require(\"../../observable/onErrorResumeNext\");\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.obj = obj;\n        _this.scheduler = scheduler;\n        _this.keys = Object.keys(obj);\n        return _this;\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PairsObservable_1 = require(\"./PairsObservable\");\nexports.pairs = PairsObservable_1.PairsObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar pairs_1 = require(\"../../observable/pairs\");\nObservable_1.Observable.pairs = pairs_1.pairs;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.start = start;\n        _this._count = count;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RangeObservable_1 = require(\"./RangeObservable\");\nexports.range = RangeObservable_1.RangeObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar range_1 = require(\"../../observable/range\");\nObservable_1.Observable.range = range_1.range;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        var _this = _super.call(this) || this;\n        _this.resourceFactory = resourceFactory;\n        _this.observableFactory = observableFactory;\n        return _this;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        var _this = _super.call(this, destination) || this;\n        _this.resource = resource;\n        _this.observableFactory = observableFactory;\n        destination.add(resource);\n        _this.tryUse();\n        return _this;\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UsingObservable_1 = require(\"./UsingObservable\");\nexports.using = UsingObservable_1.UsingObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar using_1 = require(\"../../observable/using\");\nObservable_1.Observable.using = using_1.using;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.error = error;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ErrorObservable_1 = require(\"./ErrorObservable\");\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar throw_1 = require(\"../../observable/throw\");\nObservable_1.Observable.throw = throw_1._throw;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar timer_1 = require(\"../../observable/timer\");\nObservable_1.Observable.timer = timer_1.timer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zip_1 = require(\"../operators/zip\");\nexports.zip = zip_1.zipStatic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar zip_1 = require(\"../../observable/zip\");\nObservable_1.Observable.zip = zip_1.zip;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AjaxObservable_1 = require(\"./AjaxObservable\");\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../../Observable\");\nvar ajax_1 = require(\"../../../observable/dom/ajax\");\nObservable_1.Observable.ajax = ajax_1.ajax;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"./root\");\nfunction assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\nexports.assignImpl = assignImpl;\n;\nfunction getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexports.getAssign = getAssign;\nexports.assign = getAssign(root_1.root);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../../Subject\");\nvar Subscriber_1 = require(\"../../Subscriber\");\nvar Observable_1 = require(\"../../Observable\");\nvar Subscription_1 = require(\"../../Subscription\");\nvar root_1 = require(\"../../util/root\");\nvar ReplaySubject_1 = require(\"../../ReplaySubject\");\nvar tryCatch_1 = require(\"../../util/tryCatch\");\nvar errorObject_1 = require(\"../../util/errorObject\");\nvar assign_1 = require(\"../../util/assign\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        var _this = this;\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _this = _super.call(this, destination, urlConfigOrSource) || this;\n        }\n        else {\n            _this = _super.call(this) || this;\n            _this.WebSocketCtor = root_1.root.WebSocket;\n            _this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                _this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(_this, urlConfigOrSource);\n            }\n            if (!_this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            _this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        return _this;\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        this._output = new Subject_1.Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar WebSocketSubject_1 = require(\"./WebSocketSubject\");\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../../Observable\");\nvar webSocket_1 = require(\"../../../observable/dom/webSocket\");\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_1 = require(\"../operators/buffer\");\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return buffer_1.buffer(closingNotifier)(this);\n}\nexports.buffer = buffer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar buffer_1 = require(\"../../operator/buffer\");\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bufferCount_1 = require(\"../operators/bufferCount\");\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);\n}\nexports.bufferCount = bufferCount;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar bufferCount_1 = require(\"../../operator/bufferCount\");\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar bufferTime_1 = require(\"../operators/bufferTime\");\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar bufferTime_1 = require(\"../../operator/bufferTime\");\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bufferToggle_1 = require(\"../operators/bufferToggle\");\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);\n}\nexports.bufferToggle = bufferToggle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar bufferToggle_1 = require(\"../../operator/bufferToggle\");\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bufferWhen_1 = require(\"../operators/bufferWhen\");\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar bufferWhen_1 = require(\"../../operator/bufferWhen\");\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar catchError_1 = require(\"../operators/catchError\");\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar catch_1 = require(\"../../operator/catch\");\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar combineAll_1 = require(\"../operators/combineAll\");\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return combineAll_1.combineAll(project)(this);\n}\nexports.combineAll = combineAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar combineAll_1 = require(\"../../operator/combineAll\");\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar combineLatest_1 = require(\"../operators/combineLatest\");\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return combineLatest_1.combineLatest.apply(void 0, observables)(this);\n}\nexports.combineLatest = combineLatest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar combineLatest_1 = require(\"../../operator/combineLatest\");\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar concat_1 = require(\"../operators/concat\");\nvar concat_2 = require(\"../observable/concat\");\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return concat_1.concat.apply(void 0, observables)(this);\n}\nexports.concat = concat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar concat_1 = require(\"../../operator/concat\");\nObservable_1.Observable.prototype.concat = concat_1.concat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar concatAll_1 = require(\"../operators/concatAll\");\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return concatAll_1.concatAll()(this);\n}\nexports.concatAll = concatAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar concatAll_1 = require(\"../../operator/concatAll\");\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar concatMap_1 = require(\"../operators/concatMap\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar concatMap_1 = require(\"../../operator/concatMap\");\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar concatMapTo_1 = require(\"../operators/concatMapTo\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);\n}\nexports.concatMapTo = concatMapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar concatMapTo_1 = require(\"../../operator/concatMapTo\");\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar count_1 = require(\"../operators/count\");\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar count_1 = require(\"../../operator/count\");\nObservable_1.Observable.prototype.count = count_1.count;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dematerialize_1 = require(\"../operators/dematerialize\");\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return dematerialize_1.dematerialize()(this);\n}\nexports.dematerialize = dematerialize;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar dematerialize_1 = require(\"../../operator/dematerialize\");\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar debounce_1 = require(\"../operators/debounce\");\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return debounce_1.debounce(durationSelector)(this);\n}\nexports.debounce = debounce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar debounce_1 = require(\"../../operator/debounce\");\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar debounceTime_1 = require(\"../operators/debounceTime\");\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return debounceTime_1.debounceTime(dueTime, scheduler)(this);\n}\nexports.debounceTime = debounceTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar debounceTime_1 = require(\"../../operator/debounceTime\");\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar defaultIfEmpty_1 = require(\"../operators/defaultIfEmpty\");\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);\n}\nexports.defaultIfEmpty = defaultIfEmpty;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar defaultIfEmpty_1 = require(\"../../operator/defaultIfEmpty\");\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar delay_1 = require(\"../operators/delay\");\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return delay_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar delay_1 = require(\"../../operator/delay\");\nObservable_1.Observable.prototype.delay = delay_1.delay;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar delayWhen_1 = require(\"../operators/delayWhen\");\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);\n}\nexports.delayWhen = delayWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar delayWhen_1 = require(\"../../operator/delayWhen\");\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar distinct_1 = require(\"../operators/distinct\");\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return distinct_1.distinct(keySelector, flushes)(this);\n}\nexports.distinct = distinct;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar distinct_1 = require(\"../../operator/distinct\");\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar distinctUntilChanged_1 = require(\"../operators/distinctUntilChanged\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar distinctUntilChanged_1 = require(\"../../operator/distinctUntilChanged\");\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar distinctUntilKeyChanged_1 = require(\"../operators/distinctUntilKeyChanged\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar distinctUntilKeyChanged_1 = require(\"../../operator/distinctUntilKeyChanged\");\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tap_1 = require(\"../operators/tap\");\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar do_1 = require(\"../../operator/do\");\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar exhaust_1 = require(\"../operators/exhaust\");\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return exhaust_1.exhaust()(this);\n}\nexports.exhaust = exhaust;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar exhaust_1 = require(\"../../operator/exhaust\");\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar exhaustMap_1 = require(\"../operators/exhaustMap\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return exhaustMap_1.exhaustMap(project, resultSelector)(this);\n}\nexports.exhaustMap = exhaustMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar exhaustMap_1 = require(\"../../operator/exhaustMap\");\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar expand_1 = require(\"../operators/expand\");\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return expand_1.expand(project, concurrent, scheduler)(this);\n}\nexports.expand = expand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar expand_1 = require(\"../../operator/expand\");\nObservable_1.Observable.prototype.expand = expand_1.expand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar elementAt_1 = require(\"../operators/elementAt\");\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar elementAt_1 = require(\"../../operator/elementAt\");\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar filter_1 = require(\"../operators/filter\");\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar filter_1 = require(\"../../operator/filter\");\nObservable_1.Observable.prototype.filter = filter_1.filter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar finalize_1 = require(\"../operators/finalize\");\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return finalize_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar finally_1 = require(\"../../operator/finally\");\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar find_1 = require(\"../operators/find\");\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    return find_1.find(predicate, thisArg)(this);\n}\nexports.find = find;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar find_1 = require(\"../../operator/find\");\nObservable_1.Observable.prototype.find = find_1.find;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar findIndex_1 = require(\"../operators/findIndex\");\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return findIndex_1.findIndex(predicate, thisArg)(this);\n}\nexports.findIndex = findIndex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar findIndex_1 = require(\"../../operator/findIndex\");\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar first_1 = require(\"../operators/first\");\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar first_1 = require(\"../../operator/first\");\nObservable_1.Observable.prototype.first = first_1.first;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar groupBy_1 = require(\"../operators/groupBy\");\nexports.GroupedObservable = groupBy_1.GroupedObservable;\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\nexports.groupBy = groupBy;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar groupBy_1 = require(\"../../operator/groupBy\");\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ignoreElements_1 = require(\"../operators/ignoreElements\");\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return ignoreElements_1.ignoreElements()(this);\n}\nexports.ignoreElements = ignoreElements;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar ignoreElements_1 = require(\"../../operator/ignoreElements\");\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isEmpty_1 = require(\"../operators/isEmpty\");\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return isEmpty_1.isEmpty()(this);\n}\nexports.isEmpty = isEmpty;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar isEmpty_1 = require(\"../../operator/isEmpty\");\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar audit_1 = require(\"../operators/audit\");\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return audit_1.audit(durationSelector)(this);\n}\nexports.audit = audit;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar audit_1 = require(\"../../operator/audit\");\nObservable_1.Observable.prototype.audit = audit_1.audit;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar auditTime_1 = require(\"../operators/auditTime\");\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return auditTime_1.auditTime(duration, scheduler)(this);\n}\nexports.auditTime = auditTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar auditTime_1 = require(\"../../operator/auditTime\");\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar last_1 = require(\"../operators/last\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return last_1.last(predicate, resultSelector, defaultValue)(this);\n}\nexports.last = last;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar last_1 = require(\"../../operator/last\");\nObservable_1.Observable.prototype.last = last_1.last;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar let_1 = require(\"../../operator/let\");\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar every_1 = require(\"../operators/every\");\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return every_1.every(predicate, thisArg)(this);\n}\nexports.every = every;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar every_1 = require(\"../../operator/every\");\nObservable_1.Observable.prototype.every = every_1.every;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar map_1 = require(\"../operators/map\");\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar map_1 = require(\"../../operator/map\");\nObservable_1.Observable.prototype.map = map_1.map;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mapTo_1 = require(\"../operators/mapTo\");\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return mapTo_1.mapTo(value)(this);\n}\nexports.mapTo = mapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar mapTo_1 = require(\"../../operator/mapTo\");\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar materialize_1 = require(\"../operators/materialize\");\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return materialize_1.materialize()(this);\n}\nexports.materialize = materialize;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar materialize_1 = require(\"../../operator/materialize\");\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar max_1 = require(\"../operators/max\");\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    return max_1.max(comparer)(this);\n}\nexports.max = max;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar max_1 = require(\"../../operator/max\");\nObservable_1.Observable.prototype.max = max_1.max;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge_1 = require(\"../operators/merge\");\nvar merge_2 = require(\"../observable/merge\");\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar merge_1 = require(\"../../operator/merge\");\nObservable_1.Observable.prototype.merge = merge_1.merge;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mergeAll_1 = require(\"../operators/mergeAll\");\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeAll_1.mergeAll(concurrent)(this);\n}\nexports.mergeAll = mergeAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar mergeAll_1 = require(\"../../operator/mergeAll\");\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mergeMap_1 = require(\"../operators/mergeMap\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar mergeMap_1 = require(\"../../operator/mergeMap\");\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mergeMapTo_1 = require(\"../operators/mergeMapTo\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);\n}\nexports.mergeMapTo = mergeMapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar mergeMapTo_1 = require(\"../../operator/mergeMapTo\");\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mergeScan_1 = require(\"../operators/mergeScan\");\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar mergeScan_1 = require(\"../../operator/mergeScan\");\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar min_1 = require(\"../operators/min\");\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    return min_1.min(comparer)(this);\n}\nexports.min = min;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar min_1 = require(\"../../operator/min\");\nObservable_1.Observable.prototype.min = min_1.min;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar multicast_1 = require(\"../operators/multicast\");\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);\n}\nexports.multicast = multicast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar multicast_1 = require(\"../../operator/multicast\");\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar observeOn_1 = require(\"../operators/observeOn\");\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar observeOn_1 = require(\"../../operator/observeOn\");\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar onErrorResumeNext_1 = require(\"../operators/onErrorResumeNext\");\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar onErrorResumeNext_1 = require(\"../../operator/onErrorResumeNext\");\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pairwise_1 = require(\"../operators/pairwise\");\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return pairwise_1.pairwise()(this);\n}\nexports.pairwise = pairwise;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar pairwise_1 = require(\"../../operator/pairwise\");\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar partition_1 = require(\"../operators/partition\");\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return partition_1.partition(predicate, thisArg)(this);\n}\nexports.partition = partition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar partition_1 = require(\"../../operator/partition\");\nObservable_1.Observable.prototype.partition = partition_1.partition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pluck_1 = require(\"../operators/pluck\");\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i] = arguments[_i];\n    }\n    return pluck_1.pluck.apply(void 0, properties)(this);\n}\nexports.pluck = pluck;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar pluck_1 = require(\"../../operator/pluck\");\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar publish_1 = require(\"../operators/publish\");\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar publish_1 = require(\"../../operator/publish\");\nObservable_1.Observable.prototype.publish = publish_1.publish;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar publishBehavior_1 = require(\"../operators/publishBehavior\");\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return publishBehavior_1.publishBehavior(value)(this);\n}\nexports.publishBehavior = publishBehavior;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar publishBehavior_1 = require(\"../../operator/publishBehavior\");\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar publishReplay_1 = require(\"../operators/publishReplay\");\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\nexports.publishReplay = publishReplay;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar publishReplay_1 = require(\"../../operator/publishReplay\");\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar publishLast_1 = require(\"../operators/publishLast\");\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return publishLast_1.publishLast()(this);\n}\nexports.publishLast = publishLast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar publishLast_1 = require(\"../../operator/publishLast\");\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar race_1 = require(\"../operators/race\");\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require(\"../observable/race\");\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar race_1 = require(\"../../operator/race\");\nObservable_1.Observable.prototype.race = race_1.race;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar reduce_1 = require(\"../operators/reduce\");\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return reduce_1.reduce(accumulator, seed)(this);\n    }\n    return reduce_1.reduce(accumulator)(this);\n}\nexports.reduce = reduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar reduce_1 = require(\"../../operator/reduce\");\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar repeat_1 = require(\"../operators/repeat\");\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar repeat_1 = require(\"../../operator/repeat\");\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar repeatWhen_1 = require(\"../operators/repeatWhen\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return repeatWhen_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar repeatWhen_1 = require(\"../../operator/repeatWhen\");\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar retry_1 = require(\"../operators/retry\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return retry_1.retry(count)(this);\n}\nexports.retry = retry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar retry_1 = require(\"../../operator/retry\");\nObservable_1.Observable.prototype.retry = retry_1.retry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar retryWhen_1 = require(\"../operators/retryWhen\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar retryWhen_1 = require(\"../../operator/retryWhen\");\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sample_1 = require(\"../operators/sample\");\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return sample_1.sample(notifier)(this);\n}\nexports.sample = sample;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar sample_1 = require(\"../../operator/sample\");\nObservable_1.Observable.prototype.sample = sample_1.sample;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar sampleTime_1 = require(\"../operators/sampleTime\");\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return sampleTime_1.sampleTime(period, scheduler)(this);\n}\nexports.sampleTime = sampleTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar sampleTime_1 = require(\"../../operator/sampleTime\");\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scan_1 = require(\"../operators/scan\");\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar scan_1 = require(\"../../operator/scan\");\nObservable_1.Observable.prototype.scan = scan_1.scan;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sequenceEqual_1 = require(\"../operators/sequenceEqual\");\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);\n}\nexports.sequenceEqual = sequenceEqual;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar sequenceEqual_1 = require(\"../../operator/sequenceEqual\");\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar share_1 = require(\"../operators/share\");\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar share_1 = require(\"../../operator/share\");\nObservable_1.Observable.prototype.share = share_1.share;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shareReplay_1 = require(\"../operators/shareReplay\");\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\nexports.shareReplay = shareReplay;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar shareReplay_1 = require(\"../../operator/shareReplay\");\nObservable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar single_1 = require(\"../operators/single\");\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return single_1.single(predicate)(this);\n}\nexports.single = single;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar single_1 = require(\"../../operator/single\");\nObservable_1.Observable.prototype.single = single_1.single;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar skip_1 = require(\"../operators/skip\");\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar skip_1 = require(\"../../operator/skip\");\nObservable_1.Observable.prototype.skip = skip_1.skip;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar skipLast_1 = require(\"../operators/skipLast\");\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar skipLast_1 = require(\"../../operator/skipLast\");\nObservable_1.Observable.prototype.skipLast = skipLast_1.skipLast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar skipUntil_1 = require(\"../operators/skipUntil\");\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar skipUntil_1 = require(\"../../operator/skipUntil\");\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar skipWhile_1 = require(\"../operators/skipWhile\");\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar skipWhile_1 = require(\"../../operator/skipWhile\");\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar startWith_1 = require(\"../operators/startWith\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar startWith_1 = require(\"../../operator/startWith\");\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar asap_1 = require(\"../scheduler/asap\");\nvar isNumeric_1 = require(\"../util/isNumeric\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.delayTime = delayTime;\n        _this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            _this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            _this.scheduler = asap_1.asap;\n        }\n        return _this;\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SubscribeOnObservable_1 = require(\"../observable/SubscribeOnObservable\");\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nexports.subscribeOn = subscribeOn;\nvar SubscribeOnOperator = /** @class */ (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar subscribeOn_1 = require(\"../operators/subscribeOn\");\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return subscribeOn_1.subscribeOn(scheduler, delay)(this);\n}\nexports.subscribeOn = subscribeOn;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar subscribeOn_1 = require(\"../../operator/subscribeOn\");\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar switchAll_1 = require(\"../operators/switchAll\");\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return switchAll_1.switchAll()(this);\n}\nexports._switch = _switch;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar switch_1 = require(\"../../operator/switch\");\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar switchMap_1 = require(\"../operators/switchMap\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar switchMap_1 = require(\"../../operator/switchMap\");\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar switchMapTo_1 = require(\"../operators/switchMapTo\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);\n}\nexports.switchMapTo = switchMapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar switchMapTo_1 = require(\"../../operator/switchMapTo\");\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar take_1 = require(\"../operators/take\");\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return take_1.take(count)(this);\n}\nexports.take = take;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar take_1 = require(\"../../operator/take\");\nObservable_1.Observable.prototype.take = take_1.take;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar takeLast_1 = require(\"../operators/takeLast\");\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return takeLast_1.takeLast(count)(this);\n}\nexports.takeLast = takeLast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar takeLast_1 = require(\"../../operator/takeLast\");\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar takeUntil_1 = require(\"../operators/takeUntil\");\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar takeUntil_1 = require(\"../../operator/takeUntil\");\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar takeWhile_1 = require(\"../operators/takeWhile\");\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar takeWhile_1 = require(\"../../operator/takeWhile\");\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar throttle_1 = require(\"../operators/throttle\");\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttle_1.throttle(durationSelector, config)(this);\n}\nexports.throttle = throttle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar throttle_1 = require(\"../../operator/throttle\");\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar throttle_1 = require(\"../operators/throttle\");\nvar throttleTime_1 = require(\"../operators/throttleTime\");\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar throttleTime_1 = require(\"../../operator/throttleTime\");\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar timeInterval_1 = require(\"../../operator/timeInterval\");\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar timeout_1 = require(\"../operators/timeout\");\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeout_1.timeout(due, scheduler)(this);\n}\nexports.timeout = timeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar timeout_1 = require(\"../../operator/timeout\");\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar timeoutWith_1 = require(\"../operators/timeoutWith\");\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);\n}\nexports.timeoutWith = timeoutWith;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar timeoutWith_1 = require(\"../../operator/timeoutWith\");\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar timestamp_1 = require(\"../operators/timestamp\");\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timestamp_1.timestamp(scheduler)(this);\n}\nexports.timestamp = timestamp;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar timestamp_1 = require(\"../../operator/timestamp\");\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar toArray_1 = require(\"../operators/toArray\");\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return toArray_1.toArray()(this);\n}\nexports.toArray = toArray;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar toArray_1 = require(\"../../operator/toArray\");\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar window_1 = require(\"../operators/window\");\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return window_1.window(windowBoundaries)(this);\n}\nexports.window = window;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar window_1 = require(\"../../operator/window\");\nObservable_1.Observable.prototype.window = window_1.window;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar windowCount_1 = require(\"../operators/windowCount\");\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);\n}\nexports.windowCount = windowCount;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar windowCount_1 = require(\"../../operator/windowCount\");\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar isNumeric_1 = require(\"../util/isNumeric\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar windowTime_1 = require(\"../operators/windowTime\");\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\nexports.windowTime = windowTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar windowTime_1 = require(\"../../operator/windowTime\");\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar windowToggle_1 = require(\"../operators/windowToggle\");\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return windowToggle_1.windowToggle(openings, closingSelector)(this);\n}\nexports.windowToggle = windowToggle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar windowToggle_1 = require(\"../../operator/windowToggle\");\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar windowWhen_1 = require(\"../operators/windowWhen\");\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return windowWhen_1.windowWhen(closingSelector)(this);\n}\nexports.windowWhen = windowWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar windowWhen_1 = require(\"../../operator/windowWhen\");\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar withLatestFrom_1 = require(\"../operators/withLatestFrom\");\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar withLatestFrom_1 = require(\"../../operator/withLatestFrom\");\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zip_1 = require(\"../operators/zip\");\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return zip_1.zip.apply(void 0, observables)(this);\n}\nexports.zipProto = zipProto;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar zip_1 = require(\"../../operator/zip\");\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zipAll_1 = require(\"../operators/zipAll\");\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return zipAll_1.zipAll(project)(this);\n}\nexports.zipAll = zipAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../../Observable\");\nvar zipAll_1 = require(\"../../operator/zipAll\");\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar timeInterval_1 = require(\"../operators/timeInterval\");\nexports.TimeInterval = timeInterval_1.TimeInterval;\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeInterval_1.timeInterval(scheduler)(this);\n}\nexports.timeInterval = timeInterval;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar Subscription_1 = require(\"../Subscription\");\nvar SubscriptionLoggable_1 = require(\"./SubscriptionLoggable\");\nvar applyMixins_1 = require(\"../util/applyMixins\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        var _this = _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        }) || this;\n        _this.messages = messages;\n        _this.subscriptions = [];\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SubscriptionLog_1 = require(\"./SubscriptionLog\");\nvar SubscriptionLoggable = /** @class */ (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar Subscription_1 = require(\"../Subscription\");\nvar SubscriptionLoggable_1 = require(\"./SubscriptionLoggable\");\nvar applyMixins_1 = require(\"../util/applyMixins\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.messages = messages;\n        _this.subscriptions = [];\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SubscriptionLog = /** @class */ (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar Notification_1 = require(\"../Notification\");\nvar ColdObservable_1 = require(\"./ColdObservable\");\nvar HotObservable_1 = require(\"./HotObservable\");\nvar SubscriptionLog_1 = require(\"./SubscriptionLog\");\nvar VirtualTimeScheduler_1 = require(\"../scheduler/VirtualTimeScheduler\");\nvar defaultMaxFrame = 750;\nvar TestScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        var _this = _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame) || this;\n        _this.assertDeepEqual = assertDeepEqual;\n        _this.hotObservables = [];\n        _this.coldObservables = [];\n        _this.flushTests = [];\n        return _this;\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar AsyncAction_1 = require(\"./AsyncAction\");\nvar AsyncScheduler_1 = require(\"./AsyncScheduler\");\nvar VirtualTimeScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;\n        _this.maxFrames = maxFrames;\n        _this.frame = 0;\n        _this.index = -1;\n        return _this;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = /** @class */ (function (_super) {\n    tslib_1.__extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.index = index;\n        _this.active = true;\n        _this.index = scheduler.index = index;\n        return _this;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar root_1 = require(\"../../util/root\");\nvar tryCatch_1 = require(\"../../util/tryCatch\");\nvar errorObject_1 = require(\"../../util/errorObject\");\nvar Observable_1 = require(\"../../Observable\");\nvar Subscriber_1 = require(\"../../Subscriber\");\nvar map_1 = require(\"../../operators/map\");\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                    //suppress exceptions\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nexports.ajaxPatch = ajaxPatch;\n;\nvar mapResponse = map_1.map(function (x, index) { return x.response; });\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        var _this = _super.call(this) || this;\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        _this.request = request;\n        return _this;\n    }\n    AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        var _this = _super.call(this, destination) || this;\n        _this.request = request;\n        _this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = _this.serializeBody(request.body, request.headers['Content-Type']);\n        _this.send();\n        return _this;\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return encodeURI(key) + \"=\" + encodeURI(body[key]); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root_1.root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = /** @class */ (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = /** @class */ (function (_super) {\n    tslib_1.__extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.xhr = xhr;\n        _this.request = request;\n        _this.status = xhr.status;\n        _this.responseType = xhr.responseType || request.responseType;\n        _this.response = parseXhrResponse(_this.responseType, xhr);\n        return _this;\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = /** @class */ (function (_super) {\n    tslib_1.__extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        return _super.call(this, 'ajax timeout', xhr, request) || this;\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n","\"use strict\";\n/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"./root\");\nvar ImmediateDefinition = /** @class */ (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Immediate_1 = require(\"../util/Immediate\");\nvar AsyncAction_1 = require(\"./AsyncAction\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar AsyncScheduler_1 = require(\"./AsyncScheduler\");\nvar AsapScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AsapAction_1 = require(\"./AsapAction\");\nvar AsapScheduler_1 = require(\"./AsapScheduler\");\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"./root\");\nvar RequestAnimationFrameDefinition = /** @class */ (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar AsyncAction_1 = require(\"./AsyncAction\");\nvar AnimationFrame_1 = require(\"../util/AnimationFrame\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar AsyncScheduler_1 = require(\"./AsyncScheduler\");\nvar AnimationFrameScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnimationFrameAction_1 = require(\"./AnimationFrameAction\");\nvar AnimationFrameScheduler_1 = require(\"./AnimationFrameScheduler\");\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = /** @class */ (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        return _this;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar isNumeric_1 = require(\"../util/isNumeric\");\nvar Observable_1 = require(\"../Observable\");\nvar async_1 = require(\"../scheduler/async\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar isDate_1 = require(\"../util/isDate\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        var _this = _super.call(this) || this;\n        _this.period = -1;\n        _this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            _this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        _this.scheduler = scheduler;\n        _this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - _this.scheduler.now()) :\n            dueTime;\n        return _this;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TimerObservable_1 = require(\"./TimerObservable\");\nexports.timer = TimerObservable_1.TimerObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar audit_1 = require(\"./audit\");\nvar timer_1 = require(\"../observable/timer\");\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });\n}\nexports.auditTime = auditTime;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nexports.buffer = buffer;\nvar BufferOperator = /** @class */ (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.buffer = [];\n        _this.add(subscribeToResult_1.subscribeToResult(_this, closingNotifier));\n        return _this;\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = /** @class */ (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.buffer = [];\n        return _this;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.startBufferEvery = startBufferEvery;\n        _this.buffers = [];\n        _this.count = 0;\n        return _this;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"../scheduler/async\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = /** @class */ (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /** @class */ (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferTimeSpan = bufferTimeSpan;\n        _this.bufferCreationInterval = bufferCreationInterval;\n        _this.maxBufferSize = maxBufferSize;\n        _this.scheduler = scheduler;\n        _this.contexts = [];\n        var context = _this.openContext();\n        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (_this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: _this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n        return _this;\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscription_1 = require(\"../Subscription\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = /** @class */ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult_1.subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscription_1 = require(\"../Subscription\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = /** @class */ (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.subscribing = false;\n        _this.openBuffer();\n        return _this;\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = /** @class */ (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        var _this = _super.call(this, destination) || this;\n        _this.selector = selector;\n        _this.caught = caught;\n        return _this;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar combineLatest_1 = require(\"../operators/combineLatest\");\nfunction combineAll(project) {\n    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };\n}\nexports.combineAll = combineAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ArrayObservable_1 = require(\"../observable/ArrayObservable\");\nvar isArray_1 = require(\"../util/isArray\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = /** @class */ (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.active = 0;\n        _this.values = [];\n        _this.observables = [];\n        return _this;\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar concat_1 = require(\"../observable/concat\");\nvar concat_2 = require(\"../observable/concat\");\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nexports.concat = concat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mergeMap_1 = require(\"./mergeMap\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar concatMap_1 = require(\"./concatMap\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);\n}\nexports.concatMapTo = concatMapTo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nexports.count = count;\nvar CountOperator = /** @class */ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = /** @class */ (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        _this.durationSubscription = null;\n        return _this;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar async_1 = require(\"../scheduler/async\");\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = /** @class */ (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.dueTime = dueTime;\n        _this.scheduler = scheduler;\n        _this.debouncedSubscription = null;\n        _this.lastValue = null;\n        _this.hasValue = false;\n        return _this;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"../scheduler/async\");\nvar isDate_1 = require(\"../util/isDate\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Notification_1 = require(\"../Notification\");\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nexports.delay = delay;\nvar DelayOperator = /** @class */ (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.delay = delay;\n        _this.scheduler = scheduler;\n        _this.queue = [];\n        _this.active = false;\n        _this.errored = false;\n        return _this;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = /** @class */ (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Observable_1 = require(\"../Observable\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = /** @class */ (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.delayDurationSelector = delayDurationSelector;\n        _this.completed = false;\n        _this.delayNotifierSubscriptions = [];\n        _this.values = [];\n        return _this;\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subscriptionDelay = subscriptionDelay;\n        return _this;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.source = source;\n        _this.sourceSubscribed = false;\n        return _this;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = /** @class */ (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"./root\");\nfunction minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return /** @class */ (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar Set_1 = require(\"../util/Set\");\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = /** @class */ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set_1.Set();\n        if (flushes) {\n            _this.add(subscribeToResult_1.subscribeToResult(_this, flushes));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = /** @class */ (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.hasKey = false;\n        if (typeof compare === 'function') {\n            _this.compare = compare;\n        }\n        return _this;\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar distinctUntilChanged_1 = require(\"./distinctUntilChanged\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar ArgumentOutOfRangeError_1 = require(\"../util/ArgumentOutOfRangeError\");\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = /** @class */ (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.index = index;\n        _this.defaultValue = defaultValue;\n        return _this;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nexports.every = every;\nvar EveryOperator = /** @class */ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = /** @class */ (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasCompleted = false;\n        _this.hasSubscription = false;\n        return _this;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = /** @class */ (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.resultSelector = resultSelector;\n        _this.hasSubscription = false;\n        _this.hasCompleted = false;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexports.expand = expand;\nvar ExpandOperator = /** @class */ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Subscription_1 = require(\"../Subscription\");\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nexports.finalize = finalize;\nvar FinallyOperator = /** @class */ (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        var _this = _super.call(this, destination) || this;\n        _this.add(new Subscription_1.Subscription(callback));\n        return _this;\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexports.find = find;\nvar FindValueOperator = /** @class */ (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.yieldIndex = yieldIndex;\n        _this.thisArg = thisArg;\n        _this.index = 0;\n        return _this;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar find_1 = require(\"../operators/find\");\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };\n}\nexports.findIndex = findIndex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar EmptyError_1 = require(\"../util/EmptyError\");\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = /** @class */ (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.resultSelector = resultSelector;\n        _this.defaultValue = defaultValue;\n        _this.source = source;\n        _this.index = 0;\n        _this.hasCompleted = false;\n        _this._emitted = false;\n        return _this;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MapPolyfill = /** @class */ (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"./root\");\nvar MapPolyfill_1 = require(\"./MapPolyfill\");\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FastMap = /** @class */ (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Subscription_1 = require(\"../Subscription\");\nvar Observable_1 = require(\"../Observable\");\nvar Subject_1 = require(\"../Subject\");\nvar Map_1 = require(\"../util/Map\");\nvar FastMap_1 = require(\"../util/FastMap\");\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = /** @class */ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /** @class */ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar noop_1 = require(\"../util/noop\");\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nexports.ignoreElements = ignoreElements;\nvar IgnoreElementsOperator = /** @class */ (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nfunction isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = /** @class */ (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar EmptyError_1 = require(\"../util/EmptyError\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.last = last;\nvar LastOperator = /** @class */ (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.resultSelector = resultSelector;\n        _this.defaultValue = defaultValue;\n        _this.source = source;\n        _this.hasValue = false;\n        _this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            _this.lastValue = defaultValue;\n            _this.hasValue = true;\n        }\n        return _this;\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nexports.mapTo = mapTo;\nvar MapToOperator = /** @class */ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Notification_1 = require(\"../Notification\");\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nexports.materialize = materialize;\nvar MaterializeOperator = /** @class */ (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar reduce_1 = require(\"./reduce\");\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce_1.reduce(max);\n}\nexports.max = max;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../Observable\");\nvar ArrayObservable_1 = require(\"./ArrayObservable\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar mergeAll_1 = require(\"../operators/mergeAll\");\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge_1 = require(\"../observable/merge\");\nvar merge_2 = require(\"../observable/merge\");\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = /** @class */ (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        var _this = _super.call(this, destination) || this;\n        _this.ish = ish;\n        _this.resultSelector = resultSelector;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = /** @class */ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar reduce_1 = require(\"./reduce\");\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce_1.reduce(min);\n}\nexports.min = min;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar FromObservable_1 = require(\"../observable/FromObservable\");\nvar isArray_1 = require(\"../util/isArray\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = /** @class */ (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.nextSources = nextSources;\n        return _this;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = /** @class */ (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasPrev = false;\n        return _this;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = /** @class */ (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.count = 0;\n        return _this;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar not_1 = require(\"../util/not\");\nvar filter_1 = require(\"./filter\");\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return function (source) { return [\n        filter_1.filter(predicate, thisArg)(source),\n        filter_1.filter(not_1.not(predicate, thisArg))(source)\n    ]; };\n}\nexports.partition = partition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar map_1 = require(\"./map\");\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\nvar multicast_1 = require(\"./multicast\");\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"./Subject\");\nvar ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BehaviorSubject_1 = require(\"../BehaviorSubject\");\nvar multicast_1 = require(\"./multicast\");\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };\n}\nexports.publishBehavior = publishBehavior;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"./Subject\");\nvar Subscription_1 = require(\"./Subscription\");\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.value = null;\n        _this.hasNext = false;\n        _this.hasCompleted = false;\n        return _this;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AsyncSubject_1 = require(\"../AsyncSubject\");\nvar multicast_1 = require(\"./multicast\");\nfunction publishLast() {\n    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };\n}\nexports.publishLast = publishLast;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ReplaySubject_1 = require(\"../ReplaySubject\");\nvar multicast_1 = require(\"./multicast\");\n/* tslint:enable:max-line-length */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };\n}\nexports.publishReplay = publishReplay;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar isArray_1 = require(\"../util/isArray\");\nvar ArrayObservable_1 = require(\"../observable/ArrayObservable\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.race = race;\nvar RaceOperator = /** @class */ (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasFirst = false;\n        _this.observables = [];\n        _this.subscriptions = [];\n        return _this;\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isArray_1 = require(\"../util/isArray\");\nvar race_1 = require(\"../observable/race\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar EmptyObservable_1 = require(\"../observable/EmptyObservable\");\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nexports.repeat = repeat;\nvar RepeatOperator = /** @class */ (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = /** @class */ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            else if (this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nexports.retry = retry;\nvar RetryOperator = /** @class */ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = /** @class */ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = /** @class */ (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.hasValue = false;\n        return _this;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar async_1 = require(\"../scheduler/async\");\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = /** @class */ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = /** @class */ (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        var _this = _super.call(this, destination) || this;\n        _this.compareTo = compareTo;\n        _this.comparor = comparor;\n        _this._a = [];\n        _this._b = [];\n        _this._oneComplete = false;\n        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n        return _this;\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar Observable_1 = require(\"../Observable\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Subscription_1 = require(\"../Subscription\");\nvar refCount_1 = require(\"../operators/refCount\");\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = /** @class */ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ConnectableObservable_1 = require(\"../observable/ConnectableObservable\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = /** @class */ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = /** @class */ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar multicast_1 = require(\"./multicast\");\nvar refCount_1 = require(\"./refCount\");\nvar Subject_1 = require(\"../Subject\");\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar AsyncAction_1 = require(\"./AsyncAction\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar AsyncScheduler_1 = require(\"./AsyncScheduler\");\nvar QueueScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar QueueAction_1 = require(\"./QueueAction\");\nvar QueueScheduler_1 = require(\"./QueueScheduler\");\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"./Subject\");\nvar queue_1 = require(\"./scheduler/queue\");\nvar Subscription_1 = require(\"./Subscription\");\nvar observeOn_1 = require(\"./operators/observeOn\");\nvar ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\nvar SubjectSubscription_1 = require(\"./SubjectSubscription\");\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = /** @class */ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        return _this;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = /** @class */ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ReplaySubject_1 = require(\"../ReplaySubject\");\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = /** @class */ (function (_super) {\n    tslib_1.__extends(EmptyError, _super);\n    function EmptyError() {\n        var _this = this;\n        var err = _this = _super.call(this, 'no elements in sequence') || this;\n        _this.name = err.name = 'EmptyError';\n        _this.stack = err.stack;\n        _this.message = err.message;\n        return _this;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar EmptyError_1 = require(\"../util/EmptyError\");\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nexports.single = single;\nvar SingleOperator = /** @class */ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = /** @class */ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar ArgumentOutOfRangeError_1 = require(\"../util/ArgumentOutOfRangeError\");\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = /** @class */ (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        var _this = _super.call(this, destination) || this;\n        _this._skipCount = _skipCount;\n        _this._count = 0;\n        _this._ring = new Array(_skipCount);\n        return _this;\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = /** @class */ (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasValue = false;\n        _this.isInnerStopped = false;\n        _this.add(subscribeToResult_1.subscribeToResult(_this, notifier));\n        return _this;\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = /** @class */ (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.skipping = true;\n        _this.index = 0;\n        return _this;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ArrayObservable_1 = require(\"./ArrayObservable\");\nexports.of = ArrayObservable_1.ArrayObservable.of;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar root_1 = require(\"../util/root\");\nvar Observable_1 = require(\"../Observable\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.promise = promise;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar root_1 = require(\"../util/root\");\nvar Observable_1 = require(\"../Observable\");\nvar iterator_1 = require(\"../symbol/iterator\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        _this.iterator = getIterator(iterator);\n        return _this;\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = /** @class */ (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = /** @class */ (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar ScalarObservable_1 = require(\"./ScalarObservable\");\nvar EmptyObservable_1 = require(\"./EmptyObservable\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.arrayLike = arrayLike;\n        _this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            _this._isScalar = true;\n            _this.value = arrayLike[0];\n        }\n        return _this;\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"./Observable\");\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = /** @class */ (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Notification_1 = require(\"../Notification\");\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = /** @class */ (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.delay = delay;\n        return _this;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = /** @class */ (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar isArray_1 = require(\"../util/isArray\");\nvar isArrayLike_1 = require(\"../util/isArrayLike\");\nvar isPromise_1 = require(\"../util/isPromise\");\nvar PromiseObservable_1 = require(\"./PromiseObservable\");\nvar IteratorObservable_1 = require(\"./IteratorObservable\");\nvar ArrayObservable_1 = require(\"./ArrayObservable\");\nvar ArrayLikeObservable_1 = require(\"./ArrayLikeObservable\");\nvar iterator_1 = require(\"../symbol/iterator\");\nvar Observable_1 = require(\"../Observable\");\nvar observeOn_1 = require(\"../operators/observeOn\");\nvar observable_1 = require(\"../symbol/observable\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        var _this = _super.call(this, null) || this;\n        _this.ish = ish;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FromObservable_1 = require(\"./FromObservable\");\nexports.from = FromObservable_1.FromObservable.create;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = /** @class */ (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.resultSelector = resultSelector;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mergeMap_1 = require(\"./mergeMap\");\nvar identity_1 = require(\"../util/identity\");\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mergeAll_1 = require(\"./mergeAll\");\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar of_1 = require(\"./of\");\nvar from_1 = require(\"./from\");\nvar concatAll_1 = require(\"../operators/concatAll\");\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ArrayObservable_1 = require(\"../observable/ArrayObservable\");\nvar ScalarObservable_1 = require(\"../observable/ScalarObservable\");\nvar EmptyObservable_1 = require(\"../observable/EmptyObservable\");\nvar concat_1 = require(\"../observable/concat\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar switchMap_1 = require(\"./switchMap\");\nvar identity_1 = require(\"../util/identity\");\nfunction switchAll() {\n    return switchMap_1.switchMap(identity_1.identity);\n}\nexports.switchAll = switchAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = /** @class */ (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.resultSelector = resultSelector;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = /** @class */ (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.inner = inner;\n        _this.resultSelector = resultSelector;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar ArgumentOutOfRangeError_1 = require(\"../util/ArgumentOutOfRangeError\");\nvar EmptyObservable_1 = require(\"../observable/EmptyObservable\");\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nexports.take = take;\nvar TakeOperator = /** @class */ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = /** @class */ (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.add(subscribeToResult_1.subscribeToResult(_this, notifier));\n        return _this;\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = /** @class */ (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = /** @class */ (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        var _this = _super.call(this, destination) || this;\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        _this.add(safeSubscriber);\n        _this.safeSubscriber = safeSubscriber;\n        return _this;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = /** @class */ (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.durationSelector = durationSelector;\n        _this._leading = _leading;\n        _this._trailing = _trailing;\n        _this._hasTrailingValue = false;\n        return _this;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar async_1 = require(\"../scheduler/async\");\nvar throttle_1 = require(\"./throttle\");\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = /** @class */ (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.duration = duration;\n        _this.scheduler = scheduler;\n        _this.leading = leading;\n        _this.trailing = trailing;\n        _this._hasTrailingValue = false;\n        _this._trailingValue = null;\n        return _this;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar async_1 = require(\"../scheduler/async\");\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = /** @class */ (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = /** @class */ (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.lastTime = 0;\n        _this.lastTime = scheduler.now();\n        return _this;\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeoutError, _super);\n    function TimeoutError() {\n        var _this = this;\n        var err = _this = _super.call(this, 'Timeout has occurred') || this;\n        _this.name = err.name = 'TimeoutError';\n        _this.stack = err.stack;\n        _this.message = err.message;\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\nexports.TimeoutError = TimeoutError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"../scheduler/async\");\nvar isDate_1 = require(\"../util/isDate\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar TimeoutError_1 = require(\"../util/TimeoutError\");\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = /** @class */ (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.scheduler = scheduler;\n        _this.errorInstance = errorInstance;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"../scheduler/async\");\nvar isDate_1 = require(\"../util/isDate\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = /** @class */ (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.withObservable = withObservable;\n        _this.scheduler = scheduler;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = /** @class */ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"../scheduler/async\");\nvar map_1 = require(\"./map\");\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = /** @class */ (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = /** @class */ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /** @class */ (function (_super) {\n    tslib_1.__extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var _this = this;\n        var err = _this = _super.call(this, 'argument out of range') || this;\n        _this.name = err.name = 'ArgumentOutOfRangeError';\n        _this.stack = err.stack;\n        _this.message = err.message;\n        return _this;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar ArgumentOutOfRangeError_1 = require(\"../util/ArgumentOutOfRangeError\");\nvar EmptyObservable_1 = require(\"../observable/EmptyObservable\");\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = /** @class */ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = /** @class */ (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.defaultValue = defaultValue;\n        _this.isEmpty = true;\n        return _this;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scan_1 = require(\"./scan\");\nvar takeLast_1 = require(\"./takeLast\");\nvar defaultIfEmpty_1 = require(\"./defaultIfEmpty\");\nvar pipe_1 = require(\"../util/pipe\");\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar reduce_1 = require(\"./reduce\");\nfunction toArrayReducer(arr, item, index) {\n    arr.push(item);\n    return arr;\n}\nfunction toArray() {\n    return reduce_1.reduce(toArrayReducer, []);\n}\nexports.toArray = toArray;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = /** @class */ (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.window = new Subject_1.Subject();\n        destination.next(_this.window);\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Subject_1 = require(\"../Subject\");\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = /** @class */ (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowSize = windowSize;\n        _this.startWindowEvery = startWindowEvery;\n        _this.windows = [new Subject_1.Subject()];\n        _this.count = 0;\n        destination.next(_this.windows[0]);\n        return _this;\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscription_1 = require(\"../Subscription\");\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /** @class */ (function (_super) {\n    tslib_1.__extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar root_1 = require(\"../util/root\");\nvar Action_1 = require(\"./Action\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = /** @class */ (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Scheduler_1 = require(\"../Scheduler\");\nvar AsyncScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        _this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        _this.scheduled = undefined;\n        return _this;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AsyncAction_1 = require(\"./AsyncAction\");\nvar AsyncScheduler_1 = require(\"./AsyncScheduler\");\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isArray_1 = require(\"../util/isArray\");\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar async_1 = require(\"../scheduler/async\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar isNumeric_1 = require(\"../util/isNumeric\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = /** @class */ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject_1.Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar Subscription_1 = require(\"../Subscription\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = /** @class */ (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(_this.openSubscription = subscribeToResult_1.subscribeToResult(_this, openings, openings));\n        return _this;\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /** @class */ (function (_super) {\n    tslib_1.__extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var _this = this;\n        var err = _this = _super.call(this, 'object unsubscribed') || this;\n        _this.name = err.name = 'ObjectUnsubscribedError';\n        _this.stack = err.stack;\n        _this.message = err.message;\n        return _this;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscription_1 = require(\"./Subscription\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /** @class */ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"./Observable\");\nvar Subscriber_1 = require(\"./Subscriber\");\nvar Subscription_1 = require(\"./Subscription\");\nvar ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\nvar SubjectSubscription_1 = require(\"./SubjectSubscription\");\nvar rxSubscriber_1 = require(\"./symbol/rxSubscriber\");\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = /** @class */ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subject_1 = require(\"../Subject\");\nvar tryCatch_1 = require(\"../util/tryCatch\");\nvar errorObject_1 = require(\"../util/errorObject\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = /** @class */ (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.closingSelector = closingSelector;\n        _this.openWindow();\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = /** @class */ (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.observables = observables;\n        _this.project = project;\n        _this.toRespond = [];\n        var len = observables.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            _this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            _this.add(subscribeToResult_1.subscribeToResult(_this, observable, observable, i));\n        }\n        return _this;\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.value = value;\n        _this.scheduler = scheduler;\n        _this._isScalar = true;\n        if (scheduler) {\n            _this._isScalar = false;\n        }\n        return _this;\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Observable_1 = require(\"../Observable\");\nvar ScalarObservable_1 = require(\"./ScalarObservable\");\nvar EmptyObservable_1 = require(\"./EmptyObservable\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        var _this = _super.call(this) || this;\n        _this.array = array;\n        _this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            _this._isScalar = true;\n            _this.value = array[0];\n        }\n        return _this;\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"./Subscriber\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subscriber_1 = require(\"../Subscriber\");\nvar rxSubscriber_1 = require(\"../symbol/rxSubscriber\");\nvar Observer_1 = require(\"../Observer\");\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar noop_1 = require(\"./noop\");\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"./util/root\");\nvar toSubscriber_1 = require(\"./util/toSubscriber\");\nvar observable_1 = require(\"./symbol/observable\");\nvar pipe_1 = require(\"./util/pipe\");\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errorObject_1 = require(\"./errorObject\");\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /** @class */ (function (_super) {\n    tslib_1.__extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        var _this = _super.call(this) || this;\n        _this.errors = errors;\n        var err = Error.call(_this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '');\n        _this.name = err.name = 'UnsubscriptionError';\n        _this.stack = err.stack;\n        _this.message = err.message;\n        return _this;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isArray_1 = require(\"./util/isArray\");\nvar isObject_1 = require(\"./util/isObject\");\nvar isFunction_1 = require(\"./util/isFunction\");\nvar tryCatch_1 = require(\"./util/tryCatch\");\nvar errorObject_1 = require(\"./util/errorObject\");\nvar UnsubscriptionError_1 = require(\"./util/UnsubscriptionError\");\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /** @class */ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"../util/root\");\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar isFunction_1 = require(\"./util/isFunction\");\nvar Subscription_1 = require(\"./Subscription\");\nvar Observer_1 = require(\"./Observer\");\nvar rxSubscriber_1 = require(\"./symbol/rxSubscriber\");\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this.syncErrorValue = null;\n        _this.syncErrorThrown = false;\n        _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        _this.destination = destinationOrNext;\n                        _this.destination.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Subscriber_1 = require(\"./Subscriber\");\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"../util/root\");\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"./root\");\nvar isArrayLike_1 = require(\"./isArrayLike\");\nvar isPromise_1 = require(\"./isPromise\");\nvar isObject_1 = require(\"./isObject\");\nvar Observable_1 = require(\"../Observable\");\nvar iterator_1 = require(\"../symbol/iterator\");\nvar InnerSubscriber_1 = require(\"../InnerSubscriber\");\nvar observable_1 = require(\"../symbol/observable\");\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar root_1 = require(\"../util/root\");\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ArrayObservable_1 = require(\"../observable/ArrayObservable\");\nvar isArray_1 = require(\"../util/isArray\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar iterator_1 = require(\"../symbol/iterator\");\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.zip = zip;\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = /** @class */ (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        var _this = _super.call(this, destination) || this;\n        _this.iterators = [];\n        _this.active = 0;\n        _this.project = (typeof project === 'function') ? project : null;\n        _this.values = values;\n        return _this;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = /** @class */ (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /** @class */ (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /** @class */ (function (_super) {\n    tslib_1.__extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        _this.observable = observable;\n        _this.stillUnsubscribed = true;\n        _this.buffer = [];\n        _this.isComplete = false;\n        return _this;\n    }\n    ZipBufferIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zip_1 = require(\"./zip\");\nfunction zipAll(project) {\n    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };\n}\nexports.zipAll = zipAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar audit_1 = require(\"./operators/audit\");\nexports.audit = audit_1.audit;\nvar auditTime_1 = require(\"./operators/auditTime\");\nexports.auditTime = auditTime_1.auditTime;\nvar buffer_1 = require(\"./operators/buffer\");\nexports.buffer = buffer_1.buffer;\nvar bufferCount_1 = require(\"./operators/bufferCount\");\nexports.bufferCount = bufferCount_1.bufferCount;\nvar bufferTime_1 = require(\"./operators/bufferTime\");\nexports.bufferTime = bufferTime_1.bufferTime;\nvar bufferToggle_1 = require(\"./operators/bufferToggle\");\nexports.bufferToggle = bufferToggle_1.bufferToggle;\nvar bufferWhen_1 = require(\"./operators/bufferWhen\");\nexports.bufferWhen = bufferWhen_1.bufferWhen;\nvar catchError_1 = require(\"./operators/catchError\");\nexports.catchError = catchError_1.catchError;\nvar combineAll_1 = require(\"./operators/combineAll\");\nexports.combineAll = combineAll_1.combineAll;\nvar combineLatest_1 = require(\"./operators/combineLatest\");\nexports.combineLatest = combineLatest_1.combineLatest;\nvar concat_1 = require(\"./operators/concat\");\nexports.concat = concat_1.concat;\nvar concatAll_1 = require(\"./operators/concatAll\");\nexports.concatAll = concatAll_1.concatAll;\nvar concatMap_1 = require(\"./operators/concatMap\");\nexports.concatMap = concatMap_1.concatMap;\nvar concatMapTo_1 = require(\"./operators/concatMapTo\");\nexports.concatMapTo = concatMapTo_1.concatMapTo;\nvar count_1 = require(\"./operators/count\");\nexports.count = count_1.count;\nvar debounce_1 = require(\"./operators/debounce\");\nexports.debounce = debounce_1.debounce;\nvar debounceTime_1 = require(\"./operators/debounceTime\");\nexports.debounceTime = debounceTime_1.debounceTime;\nvar defaultIfEmpty_1 = require(\"./operators/defaultIfEmpty\");\nexports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\nvar delay_1 = require(\"./operators/delay\");\nexports.delay = delay_1.delay;\nvar delayWhen_1 = require(\"./operators/delayWhen\");\nexports.delayWhen = delayWhen_1.delayWhen;\nvar dematerialize_1 = require(\"./operators/dematerialize\");\nexports.dematerialize = dematerialize_1.dematerialize;\nvar distinct_1 = require(\"./operators/distinct\");\nexports.distinct = distinct_1.distinct;\nvar distinctUntilChanged_1 = require(\"./operators/distinctUntilChanged\");\nexports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\nvar distinctUntilKeyChanged_1 = require(\"./operators/distinctUntilKeyChanged\");\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\nvar elementAt_1 = require(\"./operators/elementAt\");\nexports.elementAt = elementAt_1.elementAt;\nvar every_1 = require(\"./operators/every\");\nexports.every = every_1.every;\nvar exhaust_1 = require(\"./operators/exhaust\");\nexports.exhaust = exhaust_1.exhaust;\nvar exhaustMap_1 = require(\"./operators/exhaustMap\");\nexports.exhaustMap = exhaustMap_1.exhaustMap;\nvar expand_1 = require(\"./operators/expand\");\nexports.expand = expand_1.expand;\nvar filter_1 = require(\"./operators/filter\");\nexports.filter = filter_1.filter;\nvar finalize_1 = require(\"./operators/finalize\");\nexports.finalize = finalize_1.finalize;\nvar find_1 = require(\"./operators/find\");\nexports.find = find_1.find;\nvar findIndex_1 = require(\"./operators/findIndex\");\nexports.findIndex = findIndex_1.findIndex;\nvar first_1 = require(\"./operators/first\");\nexports.first = first_1.first;\nvar groupBy_1 = require(\"./operators/groupBy\");\nexports.groupBy = groupBy_1.groupBy;\nvar ignoreElements_1 = require(\"./operators/ignoreElements\");\nexports.ignoreElements = ignoreElements_1.ignoreElements;\nvar isEmpty_1 = require(\"./operators/isEmpty\");\nexports.isEmpty = isEmpty_1.isEmpty;\nvar last_1 = require(\"./operators/last\");\nexports.last = last_1.last;\nvar map_1 = require(\"./operators/map\");\nexports.map = map_1.map;\nvar mapTo_1 = require(\"./operators/mapTo\");\nexports.mapTo = mapTo_1.mapTo;\nvar materialize_1 = require(\"./operators/materialize\");\nexports.materialize = materialize_1.materialize;\nvar max_1 = require(\"./operators/max\");\nexports.max = max_1.max;\nvar merge_1 = require(\"./operators/merge\");\nexports.merge = merge_1.merge;\nvar mergeAll_1 = require(\"./operators/mergeAll\");\nexports.mergeAll = mergeAll_1.mergeAll;\nvar mergeMap_1 = require(\"./operators/mergeMap\");\nexports.mergeMap = mergeMap_1.mergeMap;\nvar mergeMap_2 = require(\"./operators/mergeMap\");\nexports.flatMap = mergeMap_2.mergeMap;\nvar mergeMapTo_1 = require(\"./operators/mergeMapTo\");\nexports.mergeMapTo = mergeMapTo_1.mergeMapTo;\nvar mergeScan_1 = require(\"./operators/mergeScan\");\nexports.mergeScan = mergeScan_1.mergeScan;\nvar min_1 = require(\"./operators/min\");\nexports.min = min_1.min;\nvar multicast_1 = require(\"./operators/multicast\");\nexports.multicast = multicast_1.multicast;\nvar observeOn_1 = require(\"./operators/observeOn\");\nexports.observeOn = observeOn_1.observeOn;\nvar onErrorResumeNext_1 = require(\"./operators/onErrorResumeNext\");\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\nvar pairwise_1 = require(\"./operators/pairwise\");\nexports.pairwise = pairwise_1.pairwise;\nvar partition_1 = require(\"./operators/partition\");\nexports.partition = partition_1.partition;\nvar pluck_1 = require(\"./operators/pluck\");\nexports.pluck = pluck_1.pluck;\nvar publish_1 = require(\"./operators/publish\");\nexports.publish = publish_1.publish;\nvar publishBehavior_1 = require(\"./operators/publishBehavior\");\nexports.publishBehavior = publishBehavior_1.publishBehavior;\nvar publishLast_1 = require(\"./operators/publishLast\");\nexports.publishLast = publishLast_1.publishLast;\nvar publishReplay_1 = require(\"./operators/publishReplay\");\nexports.publishReplay = publishReplay_1.publishReplay;\nvar race_1 = require(\"./operators/race\");\nexports.race = race_1.race;\nvar reduce_1 = require(\"./operators/reduce\");\nexports.reduce = reduce_1.reduce;\nvar repeat_1 = require(\"./operators/repeat\");\nexports.repeat = repeat_1.repeat;\nvar repeatWhen_1 = require(\"./operators/repeatWhen\");\nexports.repeatWhen = repeatWhen_1.repeatWhen;\nvar retry_1 = require(\"./operators/retry\");\nexports.retry = retry_1.retry;\nvar retryWhen_1 = require(\"./operators/retryWhen\");\nexports.retryWhen = retryWhen_1.retryWhen;\nvar refCount_1 = require(\"./operators/refCount\");\nexports.refCount = refCount_1.refCount;\nvar sample_1 = require(\"./operators/sample\");\nexports.sample = sample_1.sample;\nvar sampleTime_1 = require(\"./operators/sampleTime\");\nexports.sampleTime = sampleTime_1.sampleTime;\nvar scan_1 = require(\"./operators/scan\");\nexports.scan = scan_1.scan;\nvar sequenceEqual_1 = require(\"./operators/sequenceEqual\");\nexports.sequenceEqual = sequenceEqual_1.sequenceEqual;\nvar share_1 = require(\"./operators/share\");\nexports.share = share_1.share;\nvar shareReplay_1 = require(\"./operators/shareReplay\");\nexports.shareReplay = shareReplay_1.shareReplay;\nvar single_1 = require(\"./operators/single\");\nexports.single = single_1.single;\nvar skip_1 = require(\"./operators/skip\");\nexports.skip = skip_1.skip;\nvar skipLast_1 = require(\"./operators/skipLast\");\nexports.skipLast = skipLast_1.skipLast;\nvar skipUntil_1 = require(\"./operators/skipUntil\");\nexports.skipUntil = skipUntil_1.skipUntil;\nvar skipWhile_1 = require(\"./operators/skipWhile\");\nexports.skipWhile = skipWhile_1.skipWhile;\nvar startWith_1 = require(\"./operators/startWith\");\nexports.startWith = startWith_1.startWith;\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nvar switchAll_1 = require(\"./operators/switchAll\");\nexports.switchAll = switchAll_1.switchAll;\nvar switchMap_1 = require(\"./operators/switchMap\");\nexports.switchMap = switchMap_1.switchMap;\nvar switchMapTo_1 = require(\"./operators/switchMapTo\");\nexports.switchMapTo = switchMapTo_1.switchMapTo;\nvar take_1 = require(\"./operators/take\");\nexports.take = take_1.take;\nvar takeLast_1 = require(\"./operators/takeLast\");\nexports.takeLast = takeLast_1.takeLast;\nvar takeUntil_1 = require(\"./operators/takeUntil\");\nexports.takeUntil = takeUntil_1.takeUntil;\nvar takeWhile_1 = require(\"./operators/takeWhile\");\nexports.takeWhile = takeWhile_1.takeWhile;\nvar tap_1 = require(\"./operators/tap\");\nexports.tap = tap_1.tap;\nvar throttle_1 = require(\"./operators/throttle\");\nexports.throttle = throttle_1.throttle;\nvar throttleTime_1 = require(\"./operators/throttleTime\");\nexports.throttleTime = throttleTime_1.throttleTime;\nvar timeInterval_1 = require(\"./operators/timeInterval\");\nexports.timeInterval = timeInterval_1.timeInterval;\nvar timeout_1 = require(\"./operators/timeout\");\nexports.timeout = timeout_1.timeout;\nvar timeoutWith_1 = require(\"./operators/timeoutWith\");\nexports.timeoutWith = timeoutWith_1.timeoutWith;\nvar timestamp_1 = require(\"./operators/timestamp\");\nexports.timestamp = timestamp_1.timestamp;\nvar toArray_1 = require(\"./operators/toArray\");\nexports.toArray = toArray_1.toArray;\nvar window_1 = require(\"./operators/window\");\nexports.window = window_1.window;\nvar windowCount_1 = require(\"./operators/windowCount\");\nexports.windowCount = windowCount_1.windowCount;\nvar windowTime_1 = require(\"./operators/windowTime\");\nexports.windowTime = windowTime_1.windowTime;\nvar windowToggle_1 = require(\"./operators/windowToggle\");\nexports.windowToggle = windowToggle_1.windowToggle;\nvar windowWhen_1 = require(\"./operators/windowWhen\");\nexports.windowWhen = windowWhen_1.windowWhen;\nvar withLatestFrom_1 = require(\"./operators/withLatestFrom\");\nexports.withLatestFrom = withLatestFrom_1.withLatestFrom;\nvar zip_1 = require(\"./operators/zip\");\nexports.zip = zip_1.zip;\nvar zipAll_1 = require(\"./operators/zipAll\");\nexports.zipAll = zipAll_1.zipAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require(\"./Subject\");\nexports.Subject = Subject_1.Subject;\nexports.AnonymousSubject = Subject_1.AnonymousSubject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require(\"./Observable\");\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire(\"./add/observable/bindCallback\");\nrequire(\"./add/observable/bindNodeCallback\");\nrequire(\"./add/observable/combineLatest\");\nrequire(\"./add/observable/concat\");\nrequire(\"./add/observable/defer\");\nrequire(\"./add/observable/empty\");\nrequire(\"./add/observable/forkJoin\");\nrequire(\"./add/observable/from\");\nrequire(\"./add/observable/fromEvent\");\nrequire(\"./add/observable/fromEventPattern\");\nrequire(\"./add/observable/fromPromise\");\nrequire(\"./add/observable/generate\");\nrequire(\"./add/observable/if\");\nrequire(\"./add/observable/interval\");\nrequire(\"./add/observable/merge\");\nrequire(\"./add/observable/race\");\nrequire(\"./add/observable/never\");\nrequire(\"./add/observable/of\");\nrequire(\"./add/observable/onErrorResumeNext\");\nrequire(\"./add/observable/pairs\");\nrequire(\"./add/observable/range\");\nrequire(\"./add/observable/using\");\nrequire(\"./add/observable/throw\");\nrequire(\"./add/observable/timer\");\nrequire(\"./add/observable/zip\");\n//dom\nrequire(\"./add/observable/dom/ajax\");\nrequire(\"./add/observable/dom/webSocket\");\n//operators\nrequire(\"./add/operator/buffer\");\nrequire(\"./add/operator/bufferCount\");\nrequire(\"./add/operator/bufferTime\");\nrequire(\"./add/operator/bufferToggle\");\nrequire(\"./add/operator/bufferWhen\");\nrequire(\"./add/operator/catch\");\nrequire(\"./add/operator/combineAll\");\nrequire(\"./add/operator/combineLatest\");\nrequire(\"./add/operator/concat\");\nrequire(\"./add/operator/concatAll\");\nrequire(\"./add/operator/concatMap\");\nrequire(\"./add/operator/concatMapTo\");\nrequire(\"./add/operator/count\");\nrequire(\"./add/operator/dematerialize\");\nrequire(\"./add/operator/debounce\");\nrequire(\"./add/operator/debounceTime\");\nrequire(\"./add/operator/defaultIfEmpty\");\nrequire(\"./add/operator/delay\");\nrequire(\"./add/operator/delayWhen\");\nrequire(\"./add/operator/distinct\");\nrequire(\"./add/operator/distinctUntilChanged\");\nrequire(\"./add/operator/distinctUntilKeyChanged\");\nrequire(\"./add/operator/do\");\nrequire(\"./add/operator/exhaust\");\nrequire(\"./add/operator/exhaustMap\");\nrequire(\"./add/operator/expand\");\nrequire(\"./add/operator/elementAt\");\nrequire(\"./add/operator/filter\");\nrequire(\"./add/operator/finally\");\nrequire(\"./add/operator/find\");\nrequire(\"./add/operator/findIndex\");\nrequire(\"./add/operator/first\");\nrequire(\"./add/operator/groupBy\");\nrequire(\"./add/operator/ignoreElements\");\nrequire(\"./add/operator/isEmpty\");\nrequire(\"./add/operator/audit\");\nrequire(\"./add/operator/auditTime\");\nrequire(\"./add/operator/last\");\nrequire(\"./add/operator/let\");\nrequire(\"./add/operator/every\");\nrequire(\"./add/operator/map\");\nrequire(\"./add/operator/mapTo\");\nrequire(\"./add/operator/materialize\");\nrequire(\"./add/operator/max\");\nrequire(\"./add/operator/merge\");\nrequire(\"./add/operator/mergeAll\");\nrequire(\"./add/operator/mergeMap\");\nrequire(\"./add/operator/mergeMapTo\");\nrequire(\"./add/operator/mergeScan\");\nrequire(\"./add/operator/min\");\nrequire(\"./add/operator/multicast\");\nrequire(\"./add/operator/observeOn\");\nrequire(\"./add/operator/onErrorResumeNext\");\nrequire(\"./add/operator/pairwise\");\nrequire(\"./add/operator/partition\");\nrequire(\"./add/operator/pluck\");\nrequire(\"./add/operator/publish\");\nrequire(\"./add/operator/publishBehavior\");\nrequire(\"./add/operator/publishReplay\");\nrequire(\"./add/operator/publishLast\");\nrequire(\"./add/operator/race\");\nrequire(\"./add/operator/reduce\");\nrequire(\"./add/operator/repeat\");\nrequire(\"./add/operator/repeatWhen\");\nrequire(\"./add/operator/retry\");\nrequire(\"./add/operator/retryWhen\");\nrequire(\"./add/operator/sample\");\nrequire(\"./add/operator/sampleTime\");\nrequire(\"./add/operator/scan\");\nrequire(\"./add/operator/sequenceEqual\");\nrequire(\"./add/operator/share\");\nrequire(\"./add/operator/shareReplay\");\nrequire(\"./add/operator/single\");\nrequire(\"./add/operator/skip\");\nrequire(\"./add/operator/skipLast\");\nrequire(\"./add/operator/skipUntil\");\nrequire(\"./add/operator/skipWhile\");\nrequire(\"./add/operator/startWith\");\nrequire(\"./add/operator/subscribeOn\");\nrequire(\"./add/operator/switch\");\nrequire(\"./add/operator/switchMap\");\nrequire(\"./add/operator/switchMapTo\");\nrequire(\"./add/operator/take\");\nrequire(\"./add/operator/takeLast\");\nrequire(\"./add/operator/takeUntil\");\nrequire(\"./add/operator/takeWhile\");\nrequire(\"./add/operator/throttle\");\nrequire(\"./add/operator/throttleTime\");\nrequire(\"./add/operator/timeInterval\");\nrequire(\"./add/operator/timeout\");\nrequire(\"./add/operator/timeoutWith\");\nrequire(\"./add/operator/timestamp\");\nrequire(\"./add/operator/toArray\");\nrequire(\"./add/operator/toPromise\");\nrequire(\"./add/operator/window\");\nrequire(\"./add/operator/windowCount\");\nrequire(\"./add/operator/windowTime\");\nrequire(\"./add/operator/windowToggle\");\nrequire(\"./add/operator/windowWhen\");\nrequire(\"./add/operator/withLatestFrom\");\nrequire(\"./add/operator/zip\");\nrequire(\"./add/operator/zipAll\");\nvar Subscription_1 = require(\"./Subscription\");\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require(\"./Subscriber\");\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require(\"./AsyncSubject\");\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require(\"./ReplaySubject\");\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require(\"./BehaviorSubject\");\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar ConnectableObservable_1 = require(\"./observable/ConnectableObservable\");\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require(\"./Notification\");\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require(\"./util/EmptyError\");\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require(\"./util/ArgumentOutOfRangeError\");\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar TimeoutError_1 = require(\"./util/TimeoutError\");\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nvar UnsubscriptionError_1 = require(\"./util/UnsubscriptionError\");\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require(\"./operator/timeInterval\");\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require(\"./operators/timestamp\");\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require(\"./testing/TestScheduler\");\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require(\"./scheduler/VirtualTimeScheduler\");\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require(\"./observable/dom/AjaxObservable\");\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar pipe_1 = require(\"./util/pipe\");\nexports.pipe = pipe_1.pipe;\nvar asap_1 = require(\"./scheduler/asap\");\nvar async_1 = require(\"./scheduler/async\");\nvar queue_1 = require(\"./scheduler/queue\");\nvar animationFrame_1 = require(\"./scheduler/animationFrame\");\nvar rxSubscriber_1 = require(\"./symbol/rxSubscriber\");\nvar iterator_1 = require(\"./symbol/iterator\");\nvar observable_1 = require(\"./symbol/observable\");\nvar _operators = require(\"./operators\");\nexports.operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.rxSubscriber,\n    observable: observable_1.observable,\n    iterator: iterator_1.iterator\n};\nexports.Symbol = Symbol;\n"]}